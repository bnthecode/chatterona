[{"C:\\Code\\projects\\chatterona\\src\\index.js":"1","C:\\Code\\projects\\chatterona\\src\\App.js":"2","C:\\Code\\projects\\chatterona\\src\\reportWebVitals.js":"3","C:\\Code\\projects\\chatterona\\src\\styles\\muiTheme.js":"4","C:\\Code\\projects\\chatterona\\src\\redux\\store.js":"5","C:\\Code\\projects\\chatterona\\src\\components\\Router.js":"6","C:\\Code\\projects\\chatterona\\src\\redux\\history.js":"7","C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\rootReducer.js":"8","C:\\Code\\projects\\chatterona\\src\\utilities.js":"9","C:\\Code\\projects\\chatterona\\src\\pages\\MobileLanding.js":"10","C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\authReducer.js":"11","C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\appReducer.js":"12","C:\\Code\\projects\\chatterona\\src\\pages\\Main.js":"13","C:\\Code\\projects\\chatterona\\src\\pages\\Login.js":"14","C:\\Code\\projects\\chatterona\\src\\config.js":"15","C:\\Code\\projects\\chatterona\\src\\redux\\actions\\appActions.js":"16","C:\\Code\\projects\\chatterona\\src\\redux\\actions\\authActions.js":"17","C:\\Code\\projects\\chatterona\\src\\components\\Header.js":"18","C:\\Code\\projects\\chatterona\\src\\components\\Servers\\Servers.js":"19","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\Chat.js":"20","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChannelUsers.js":"21","C:\\Code\\projects\\chatterona\\src\\services\\index.js":"22","C:\\Code\\projects\\chatterona\\src\\components\\Channels\\Channels.js":"23","C:\\Code\\projects\\chatterona\\src\\components\\Servers\\ServerListItem.js":"24","C:\\Code\\projects\\chatterona\\src\\components\\Drawer.js":"25","C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\AddServerDialog.js":"26","C:\\Code\\projects\\chatterona\\src\\firebase.js":"27","C:\\Code\\projects\\chatterona\\src\\services\\channel-service.js":"28","C:\\Code\\projects\\chatterona\\src\\services\\server-service.js":"29","C:\\Code\\projects\\chatterona\\src\\services\\user-service.js":"30","C:\\Code\\projects\\chatterona\\src\\components\\Channels\\CreateChannelDialog.js":"31","C:\\Code\\projects\\chatterona\\src\\components\\Channels\\ChannelHeader.js":"32","C:\\Code\\projects\\chatterona\\src\\components\\Channels\\ChannelListItem.js":"33","C:\\Code\\projects\\chatterona\\src\\components\\Channels\\HeaderOptions.js":"34","C:\\Code\\projects\\chatterona\\src\\components\\Stepper.js":"35","C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageThree.js":"36","C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageTwo.js":"37","C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageOne.js":"38","C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\DialogItem.js":"39","C:\\Code\\projects\\chatterona\\src\\components\\FileInput.js":"40","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItem.js":"41","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemImage.js":"42","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemLink.js":"43","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemText.js":"44"},{"size":997,"mtime":1612523355176,"results":"45","hashOfConfig":"46"},{"size":391,"mtime":1612820896974,"results":"47","hashOfConfig":"46"},{"size":375,"mtime":1612523355182,"results":"48","hashOfConfig":"46"},{"size":3340,"mtime":1612820925424,"results":"49","hashOfConfig":"46"},{"size":896,"mtime":1612523355182,"results":"50","hashOfConfig":"46"},{"size":962,"mtime":1612523355172,"results":"51","hashOfConfig":"46"},{"size":115,"mtime":1612523355179,"results":"52","hashOfConfig":"46"},{"size":359,"mtime":1612754492339,"results":"53","hashOfConfig":"46"},{"size":1290,"mtime":1612820445504,"results":"54","hashOfConfig":"46"},{"size":765,"mtime":1612523355178,"results":"55","hashOfConfig":"46"},{"size":643,"mtime":1612523355181,"results":"56","hashOfConfig":"46"},{"size":618,"mtime":1612754492338,"results":"57","hashOfConfig":"46"},{"size":2037,"mtime":1612754492337,"results":"58","hashOfConfig":"46"},{"size":2272,"mtime":1612618099838,"results":"59","hashOfConfig":"46"},{"size":1406,"mtime":1612523355174,"results":"60","hashOfConfig":"46"},{"size":236,"mtime":1612754492337,"results":"61","hashOfConfig":"46"},{"size":111,"mtime":1612523355179,"results":"62","hashOfConfig":"46"},{"size":2537,"mtime":1612754492333,"results":"63","hashOfConfig":"46"},{"size":3947,"mtime":1612821014169,"results":"64","hashOfConfig":"46"},{"size":13343,"mtime":1612823507039,"results":"65","hashOfConfig":"46"},{"size":456,"mtime":1612821390447,"results":"66","hashOfConfig":"46"},{"size":192,"mtime":1612754492341,"results":"67","hashOfConfig":"46"},{"size":6525,"mtime":1612821669562,"results":"68","hashOfConfig":"46"},{"size":1620,"mtime":1612821349269,"results":"69","hashOfConfig":"46"},{"size":697,"mtime":1612523355171,"results":"70","hashOfConfig":"46"},{"size":1379,"mtime":1612523355166,"results":"71","hashOfConfig":"46"},{"size":750,"mtime":1612523355175,"results":"72","hashOfConfig":"46"},{"size":1029,"mtime":1612754492340,"results":"73","hashOfConfig":"46"},{"size":1129,"mtime":1612754492341,"results":"74","hashOfConfig":"46"},{"size":527,"mtime":1612579384947,"results":"75","hashOfConfig":"46"},{"size":3765,"mtime":1612523355169,"results":"76","hashOfConfig":"46"},{"size":1121,"mtime":1612820830704,"results":"77","hashOfConfig":"46"},{"size":2233,"mtime":1612754492328,"results":"78","hashOfConfig":"46"},{"size":1913,"mtime":1612523355170,"results":"79","hashOfConfig":"46"},{"size":502,"mtime":1612523355174,"results":"80","hashOfConfig":"46"},{"size":4434,"mtime":1612823553280,"results":"81","hashOfConfig":"46"},{"size":1855,"mtime":1612523355168,"results":"82","hashOfConfig":"46"},{"size":1003,"mtime":1612523355167,"results":"83","hashOfConfig":"46"},{"size":1386,"mtime":1612523355166,"results":"84","hashOfConfig":"46"},{"size":1368,"mtime":1612754492333,"results":"85","hashOfConfig":"46"},{"size":2789,"mtime":1612821889355,"results":"86","hashOfConfig":"46"},{"size":438,"mtime":1612820302932,"results":"87","hashOfConfig":"46"},{"size":891,"mtime":1612825701975,"results":"88","hashOfConfig":"46"},{"size":119,"mtime":1612819754834,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"1kxkpga",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"92"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"92"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"92"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"C:\\Code\\projects\\chatterona\\src\\index.js",[],["184","185"],"C:\\Code\\projects\\chatterona\\src\\App.js",[],"C:\\Code\\projects\\chatterona\\src\\reportWebVitals.js",[],"C:\\Code\\projects\\chatterona\\src\\styles\\muiTheme.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\store.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Router.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\history.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\rootReducer.js",[],"C:\\Code\\projects\\chatterona\\src\\utilities.js",["186"],"import axios from \"axios\";\r\nimport isImageUrl from \"is-image-url\";\r\n\r\nexport const truncateString = (str, num) => {\r\n  return str.length <= num ? str : str.slice(0, num) + \"...\";\r\n};\r\n\r\nexport const determineMobile = () => {\r\n  const toMatch = [\r\n    /Android/i,\r\n    /webOS/i,\r\n    /iPhone/i,\r\n    /iPad/i,\r\n    /iPod/i,\r\n    /BlackBerry/i,\r\n    /Windows Phone/i,\r\n  ];\r\n\r\n  return toMatch.some((toMatchItem) => {\r\n    return navigator.userAgent.match(toMatchItem);\r\n  });\r\n};\r\n\r\nexport const validateUrl = (url) => {\r\n  var pattern = new RegExp(\r\n    \"^(https?:\\\\/\\\\/)?\" + // protocol\r\n      \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\r\n      \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\r\n      \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\r\n      \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\r\n      \"(\\\\#[-a-z\\\\d_]*)?$\",\r\n    \"i\"\r\n  ); // fragment locator\r\n  return !!pattern.test(url);\r\n};\r\n\r\n\r\nexport const checkContentType = (url) => {\r\n const isUrl = validateUrl(url)\r\n  return { url: isUrl ? url : '', type: isUrl ? 'link' : 'text' };\r\n};\r\n\r\n\r\nexport const checkUrlsContent = async (url) => {\r\n\r\n  try { \r\n  const response = await axios.get(url);\r\n    return response.headers['content-type'] \r\n  }\r\n  catch {\r\n    return 'link'\r\n  }\r\n\r\n }; \r\n","C:\\Code\\projects\\chatterona\\src\\pages\\MobileLanding.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\authReducer.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\appReducer.js",[],"C:\\Code\\projects\\chatterona\\src\\pages\\Main.js",[],"C:\\Code\\projects\\chatterona\\src\\pages\\Login.js",[],"C:\\Code\\projects\\chatterona\\src\\config.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\actions\\appActions.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\actions\\authActions.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Header.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Servers\\Servers.js",["187"],"\r\nimport { Divider, makeStyles } from \"@material-ui/core\";\r\nimport Drawer from \"../Drawer\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport VideogameAssetIcon from \"@material-ui/icons/VideogameAsset\";\r\nimport { channelService, serverService, userService } from \"../../services\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nimport ServerListItem from \"./ServerListItem\";\r\nimport AddServerDialog from \"../AddServerDialog/AddServerDialog\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  \"@global\": {\r\n    \"*::-webkit-scrollbar-thumb\": {\r\n      display: \"none\",\r\n    },\r\n    \"::-webkit-scrollbar\": {\r\n      display: \"none\",\r\n    },\r\n    \"::-webkit-scrollbar-track\": {\r\n      display: \"none\",\r\n    },\r\n    \"::-webkit-scrollbar-thumb\": {\r\n      display: \"none\",\r\n    },\r\n    \"::-webkit-scrollbar-thumb:hover\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  drawer: {\r\n    height: \"100vh\",\r\n    overflowY: \"auto\",\r\n    display: \"flex\",\r\n    width: \"72px\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#202225\",\r\n  },\r\n  divider: {\r\n    backgroundColor: \"#1e1e1e\",\r\n    margin: \"0 16px 0 16px\",\r\n    height: 1,\r\n    width: \"calc(100% - 32px)\",\r\n  },\r\n}));\r\nconst Servers = ({ setServer, setChannel, user }) => {\r\n  const [servers, setServers] = useState([]);\r\n  const [selected, setSelected] = useState(\"Home\");\r\n  const [showAddServerDialog, setAddServerDialogOpen] = useState(false);\r\n  const isSelected = (id) => selected === id;\r\n\r\n  useEffect(() => {\r\n    const fetchServers = async () => {\r\n      const servers = await serverService.getServers();\r\n      setServers(servers);\r\n      setServer(servers.length ? servers[0] : {});\r\n      setSelected(servers.length ? servers[0].id : {});\r\n    };\r\n    fetchServers();\r\n  }, []);// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const handleServerSelection = async (id) => {\r\n    setSelected(id);\r\n    const foundServer = servers.find((svr) => svr.id === id);\r\n    setServer(foundServer);\r\n    const channels = await channelService.getChannels(id);\r\n    setChannel(channels.length ? channels[0] : {});\r\n  };\r\n\r\n  const handleAddServer = async (server) => {\r\n    console.log(server)\r\n    const newServer = await serverService.addServer(server, user);\r\n    await channelService.addChannel(newServer.id, {\r\n      name: \"general\",\r\n      type: \"text\",\r\n    });\r\n    await channelService.addChannel(newServer.id, {\r\n      name: \"General\",\r\n      type: \"voice\",\r\n    });\r\n    const serverList = await serverService.getServers();\r\n    const lastServer = serverList[serverList.length - 1];\r\n    setServers(serverList);\r\n    setServer(lastServer);\r\n    setSelected(lastServer.id);\r\n    setAddServerDialogOpen(false);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Drawer anchor=\"left\" className={classes.drawer}>\r\n      <ServerListItem\r\n        title=\"Home\"\r\n        id=\"Home\"\r\n        selected={isSelected(\"Home\")}\r\n        setSelected={setSelected}\r\n      >\r\n        <VideogameAssetIcon />\r\n      </ServerListItem>\r\n      <Divider className={classes.divider} />\r\n      {servers.map((svr) => (\r\n        <ServerListItem\r\n          title={svr.name}\r\n          id={svr.id}\r\n          setSelected={handleServerSelection}\r\n          selected={isSelected(svr.id)}\r\n          listItemProps={{\r\n            onClick: () => setServer(svr),\r\n            style: { backgroundImage: `url(${svr.photoURL})` },\r\n          }}\r\n        />\r\n      ))}\r\n      <ServerListItem\r\n        title=\"Add a server\"\r\n        id=\"Add a server\"\r\n        setSelected={setSelected}\r\n        selected={isSelected(\"Add a server\")}\r\n        listItemProps={{\r\n          onClick: () => setAddServerDialogOpen(true),\r\n        }}\r\n      >\r\n        <AddIcon />\r\n      </ServerListItem>\r\n      <AddServerDialog\r\n        showAddServerDialog={showAddServerDialog}\r\n        handleAddServer={handleAddServer}\r\n        setAddServerDialogOpen={setAddServerDialogOpen}\r\n      />\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default Servers;\r\n","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\Chat.js",["188","189","190","191"],"import { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, Grid, Paper, TextField, Typography } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport db, { firestore } from \"../../firebase\";\r\nimport channelService from \"../../services/channel-service\";\r\nimport FileInput from \"../FileInput\";\r\nimport \"../../utilities\";\r\nimport { checkContentType, checkUrlsContent } from \"../../utilities\";\r\nimport clsx from \"clsx\";\r\nimport ChatItem from \"./ChatItem\";\r\n\r\nconst styles = (theme) => ({\r\n  \"@global\": {\r\n    \"*::-webkit-scrollbar-thumb\": {\r\n      display: \"none\",\r\n    },\r\n    /* width */\r\n    \"::-webkit-scrollbar\": {\r\n      display: \"none\",\r\n    },\r\n\r\n    /* Track */\r\n    \"::-webkit-scrollbar-track\": {\r\n      display: \"none\",\r\n    },\r\n\r\n    /* Handle */\r\n    \"::-webkit-scrollbar-thumb\": {\r\n      display: \"none\",\r\n    },\r\n\r\n    /* Handle on hover */\r\n    \"::-webkit-scrollbar-thumb:hover\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n\r\n  input2: {\r\n    height: 16,\r\n    fontSize: \"1rem\",\r\n    borderRadius: 8,\r\n    borderWidth: 0,\r\n    outline: 0,\r\n    \"&::placeholder\": {\r\n      color: \"#fff\",\r\n    },\r\n    \"&:focus\": {\r\n      outline: 0,\r\n    },\r\n    color: \"#dcddde\",\r\n  },\r\n  cssOutlinedInput: {\r\n    \"&$cssFocused $notchedOutline\": {\r\n      borderColor: `${theme.palette.primary.main} !important`,\r\n    },\r\n  },\r\n\r\n  cssFocused: {},\r\n\r\n  notchedOutline: {\r\n    borderWidth: \"1px\",\r\n    borderColor: \"#40444b !important\",\r\n  },\r\n  input: {\r\n    backgroundColor: \"#40444b\",\r\n    width: \"calc(100% - 30px)\",\r\n    position: \"absolute\",\r\n    bottom: 0,\r\n    borderRadius: 8,\r\n    color: \"#dcddde\",\r\n  },\r\n  userTypings: {\r\n    width: 400,\r\n    position: \"absolute\",\r\n    bottom: 60,\r\n    borderRadius: 8,\r\n    color: \"white\",\r\n  },\r\n  btn: {\r\n    cursor: \"pointer\",\r\n    border: \"none\",\r\n    backgroundColor: \"transparent\",\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n      border: \"none\",\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  icon: {\r\n    color: \"#dcddde\",\r\n    fontWeight: 400,\r\n    fontSize: 24,\r\n    marginRight: 16,\r\n  },\r\n  link: {\r\n    color: \"#2196f3\",\r\n  },\r\n});\r\n\r\nclass Chat extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.messageRef = React.createRef();\r\n  }\r\n  state = {\r\n    messages: [],\r\n    usersTyping: {},\r\n    message: {\r\n      content: \"\",\r\n    },\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const { selectedChannel } = this.props;\r\n    this.registerChannelListener(selectedChannel.id);\r\n  };\r\n\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    const { selectedChannel } = this.props;\r\n\r\n    if (prevProps.selectedChannel.id !== selectedChannel.id) {\r\n      this.registerChannelListener(selectedChannel.id);\r\n    }\r\n  };\r\n\r\n  registerChannelListener = (channelId) => {\r\n    db.collection(\"channels\")\r\n      .doc(channelId)\r\n      .collection(\"messages\")\r\n      .orderBy(\"timestamp\", \"asc\")\r\n      .onSnapshot((snapshot) => {\r\n        this.setState({\r\n          messages: snapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id })),\r\n        });\r\n\r\n        if (this.messageRef && this.messageRef.current) {\r\n          this.messageRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n      });\r\n    db.collection(\"channels\")\r\n      .doc(channelId)\r\n      .onSnapshot((snapshot) => {\r\n        \r\n        this.setState({ usersTyping: snapshot.data().usersTyping });\r\n      });\r\n  };\r\n\r\n  updateMessages = (messages) => this.setState({ messages });\r\n\r\n  addMessageToChannel = async () => {\r\n    this.setState({ userTyping: false });\r\n    const {\r\n      message: { content = \"\", url = \"\", type = \"\" },\r\n    } = this.state;\r\n    const urlType = url.length ? await checkUrlsContent(url) : type;\r\n    const { selectedChannel, user } = this.props;\r\n    await db\r\n      .collection(\"channels\")\r\n      .doc(selectedChannel.id)\r\n      .collection(\"messages\")\r\n      .add({\r\n        content: [\r\n          {\r\n            message: content,\r\n            url: url || \"\",\r\n            type: urlType,\r\n            date: moment().format(\"lll\"),\r\n          },\r\n        ],\r\n        timestamp: firestore.FieldValue.serverTimestamp(),\r\n        date: moment().format(\"lll\"),\r\n        author: {\r\n          photoURL: user.photoURL,\r\n          name: user.displayName,\r\n          uid: user.uid,\r\n        },\r\n      });\r\n  };\r\n\r\n  handleTyping = (e) => {\r\n    this.setState({ userTyping: true });\r\n    const { selectedChannel, user } = this.props;\r\n    channelService.addUserTyping(selectedChannel.id, user, true);\r\n    const { url, type } = checkContentType(e.target.value);\r\n    this.setState({\r\n      message: { ...this.state.message, content: e.target.value, type, url },\r\n    });\r\n  };\r\n\r\n  submitMessage = async (e) => {\r\n    const { selectedChannel, user } = this.props;\r\n    const {\r\n      messages,\r\n      message: { content = \"\", url = \"\", type = \"\" },\r\n      message,\r\n    } = this.state;\r\n    const urlType = url.length ? await checkUrlsContent(url) : type;\r\n\r\n    if (e.key === \"Enter\") {\r\n      const lastMsg = messages[messages.length - 1];\r\n      const previousTime =\r\n        lastMsg && lastMsg.content.length\r\n          ? lastMsg.content[lastMsg.content.length - 1].date\r\n          : null;\r\n\r\n      const minutesPassedSincePrev = moment().diff(previousTime, \"minutes\");\r\n      // generate new message if user has not sent a message in the last 20 minutes AND\r\n      // if they are the previous author\r\n      const addMessageToPrevious =\r\n        minutesPassedSincePrev < 20 &&\r\n        lastMsg &&\r\n        lastMsg.author.uid === user.uid;\r\n\r\n      if (addMessageToPrevious) {\r\n        db.collection(\"channels\")\r\n          .doc(selectedChannel.id)\r\n          .collection(\"messages\")\r\n          .doc(lastMsg.id)\r\n          .update(\r\n            {\r\n              content: firestore.FieldValue.arrayUnion({\r\n                message: message.content,\r\n                url: url,\r\n                type: urlType,\r\n                date: moment().format(\"lll\"),\r\n              }),\r\n              timestamp: firestore.FieldValue.serverTimestamp(),\r\n              date: moment().format(\"lll\"),\r\n              author: {\r\n                photoURL: user.photoURL,\r\n                name: user.displayName,\r\n                uid: user.uid,\r\n              },\r\n            },\r\n            { merge: true }\r\n          );\r\n\r\n        this.setState({ message: { content: \"\" } });\r\n        channelService.addUserTyping(selectedChannel.id, user, false);\r\n        return;\r\n      }\r\n\r\n\r\n      channelService.addUserTyping(selectedChannel.id, user, false);\r\n       await this.addMessageToChannel();\r\n       this.setState({ message: { content: \"\" } });\r\n    }\r\n  };\r\n\r\n  isNewDay = (currentDate, previousDate) => {\r\n    return !moment(currentDate).isSame(previousDate, \"day\");\r\n  };\r\n\r\n  getUserTypings = () => {\r\n    const { usersTyping } = this.state;\r\n    const { user } = this.props;\r\n    let headline = \"\";\r\n    const typers = Object.keys(usersTyping).reduce((acc, key) => {\r\n      if (usersTyping[key].typing && usersTyping[key].name !== user.displayName)\r\n        acc = [...acc, usersTyping[key].name];\r\n      return acc;\r\n    }, []);\r\n    if (typers.length > 2) headline = \"Holy cow! Too many people to count!\";\r\n    else {\r\n      const join = typers.length === 1 ? \" is\" : \" are\";\r\n      headline = typers.length ? typers.join(\", \") + `${join} typing...` : \"\";\r\n    }\r\n    return (\r\n      <span\r\n        id=\"user-typing\"\r\n        style={{ fontSize: 11, fontWeight: 600, marginLeft: 8 }}\r\n      >\r\n        {headline}\r\n      </span>\r\n    );\r\n  };\r\n  fileHandler = (e) => {\r\n    const { message } = this.state;\r\n    this.setState({ message: { ...message, type: \"img\" } });\r\n  };\r\n\r\n  upload = () => {\r\n    document.getElementById(\"upload-message-img\").click();\r\n  };\r\n\r\n  buildImg = () => {};\r\n\r\n  render() {\r\n    const {\r\n      messages,\r\n      message,\r\n      message: { content, type, url },\r\n    } = this.state;\r\n    console.log(messages);\r\n    const { classes, selectedChannel } = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          position: \"relative\",\r\n          padding: 8,\r\n          left: 310,\r\n          width: \"calc(100% - 515px)\",\r\n          height: \"calc(100vh - 48px)\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            position: \"relative\",\r\n            top: 40,\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              maxHeight: \"calc(100vh - 160px)\",\r\n              padding: 0,\r\n              overflow: \"auto\",\r\n            }}\r\n          >\r\n            {messages && messages.length ? (\r\n              messages.map((msg, i) => (\r\n                <div>\r\n                  <Grid item xs={12}>\r\n                    {this.isNewDay(\r\n                      msg.date,\r\n                      messages[i - 1] ? messages[i - 1].date : msg.date\r\n                    ) ? (\r\n                      <Paper\r\n                        elevation={0}\r\n                        square\r\n                        style={{\r\n                          height: 20,\r\n                          textAlign: \"center\",\r\n                          backgroundColor: \"transparent\",\r\n                          width: \"calc(100% - 30px\",\r\n                          borderBottom: \"1px solid grey\",\r\n                          padding: 8,\r\n                        }}\r\n                      >\r\n                        <Typography\r\n                          style={{\r\n                            color: \"grey\",\r\n                            fontSize: 12,\r\n                            fontWeight: 600,\r\n                          }}\r\n                        >\r\n                          {moment(msg.date).format(\"MMMM DD, YYYY\")}\r\n                        </Typography>\r\n                      </Paper>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </Grid>\r\n                  <ChatItem\r\n                    message={msg}\r\n                    messageRef={\r\n                      i === messages.length - 1 ? this.messageRef : null\r\n                    }\r\n                  />\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <Paper\r\n                style={{\r\n                  minHeight: 40,\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  margin: 12,\r\n                  padding: 14,\r\n                  backgroundColor: \"#3a4146\",\r\n                  width: \"80%\",\r\n                }}\r\n              >\r\n                <Paper\r\n                  style={{\r\n                    backgroundImage: `url(https://images.unsplash.com/photo-1503797558227-76451ba6de08?ixid=MXwxMjA3fDB8MHxzZWFyY2h8MzN8fGdvYXR8ZW58MHx8MHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60)`,\r\n                    borderRadius: 20,\r\n                    backgroundSize: \"contain\",\r\n                    height: 40,\r\n                    width: 40,\r\n                  }}\r\n                ></Paper>\r\n                <Typography\r\n                  style={{\r\n                    fontSize: 14,\r\n                    marginLeft: 14,\r\n                    marginTop: 8,\r\n                    color: \"white\",\r\n                    fontWeight: 600,\r\n                  }}\r\n                >\r\n                  No messages in this channel! Send one to start a conversation.\r\n                </Typography>\r\n              </Paper>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          <Typography className={classes.userTypings}>\r\n            {this.getUserTypings()}\r\n          </Typography>\r\n        </div>\r\n\r\n        <TextField\r\n          InputProps={{\r\n            classes: {\r\n              root: classes.cssOutlinedInput,\r\n              input:\r\n                url && type !== \"text\"\r\n                  ? clsx([classes.input2, classes.link])\r\n                  : classes.input2,\r\n              focused: classes.cssFocused,\r\n              notchedOutline: classes.notchedOutline,\r\n            },\r\n            startAdornment: (\r\n              <div style={{ display: \"grid\" }}>\r\n                <button className={classes.btn} id=\"plus\" onClick={this.upload}>\r\n                  <FontAwesomeIcon\r\n                    className={classes.icon}\r\n                    icon={faPlusCircle}\r\n                  ></FontAwesomeIcon>\r\n                </button>\r\n                <input\r\n                  id=\"upload-message-img\"\r\n                  hidden\r\n                  type=\"file\"\r\n                  onChange={this.fileHandler}\r\n                />\r\n              </div>\r\n            ),\r\n            // classes: {\r\n            //   input:\r\n            //     url && type !== 'text'\r\n            //       ? clsx([classes.input2, classes.link])\r\n            //       : classes.input2,\r\n            // },\r\n          }}\r\n          style={{ fontSize: \"24px\" }}\r\n          variant=\"outlined\"\r\n          placeholder={`Message #${\r\n            selectedChannel ? selectedChannel.name : \"\"\r\n          }`}\r\n          autoFocus\r\n          onKeyPress={this.submitMessage}\r\n          onChange={this.handleTyping}\r\n          value={message.content}\r\n          className={classes.input}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Chat);\r\n","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChannelUsers.js",[],"C:\\Code\\projects\\chatterona\\src\\services\\index.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Channels\\Channels.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Servers\\ServerListItem.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Drawer.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\AddServerDialog.js",[],"C:\\Code\\projects\\chatterona\\src\\firebase.js",[],"C:\\Code\\projects\\chatterona\\src\\services\\channel-service.js",[],"C:\\Code\\projects\\chatterona\\src\\services\\server-service.js",[],"C:\\Code\\projects\\chatterona\\src\\services\\user-service.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Channels\\CreateChannelDialog.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Channels\\ChannelHeader.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Channels\\ChannelListItem.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Channels\\HeaderOptions.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Stepper.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageThree.js",["192"],"import {\r\n  InputLabel,\r\n  Button,\r\n  DialogTitle,\r\n  Typography,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport { faCamera } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useState } from \"react\";\r\nimport FileInput from \"../../FileInput\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    fontSize: 20,\r\n    fontWeight: 700,\r\n  },\r\n  subtitle: {\r\n    marginTop: 8,\r\n    color: \"grey\",\r\n  },\r\n  footer: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n    position: \"absolute\",\r\n    bottom: 0,\r\n    left: 0,\r\n    height: 80,\r\n    backgroundColor: \"lightgrey\",\r\n    width: \"100%\",\r\n  },\r\n\r\n  footerText: {\r\n    fontWeight: 600,\r\n    cursor: \"pointer\",\r\n    marginLeft: 20,\r\n  },\r\n  footerButton: {\r\n    marginLeft: \"auto\",\r\n    height: 40,\r\n    width: 100,\r\n    marginRight: 20,\r\n    fontWeight: 700,\r\n    textTransform: \"none\",\r\n    color: \"white\",\r\n    backgroundColor: theme.palette.secondary.main,\r\n    \"&:hover\": {\r\n      backgroundColor: \"#4f4f4f\",\r\n    },\r\n  },\r\n  uploadWrapper: {\r\n    alignSelf: \"center\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginTop: 20,\r\n    marginBottom: 140,\r\n    borderRadius: 45,\r\n    height: 90,\r\n    width: 90,\r\n    border: \"2px dashed grey\",\r\n  },\r\n  uploadIcon: {\r\n    color: \"grey\",\r\n    alignSelf: \"center\",\r\n    fontSize: 30,\r\n  },\r\n  uploadText: {\r\n    fontWeight: 700,\r\n    color: \"grey\",\r\n    fontSize: 12,\r\n  },\r\n  \"@global\": {\r\n    \"*::-webkit-file-upload-button\": {\r\n      color: \"red\",\r\n      padding: \"1em\",\r\n      cursor: \"pointer\",\r\n      backgroundColor: \"transparent\",\r\n      border: \"none\",\r\n    },\r\n  },\r\n\r\n  label: {\r\n    fontSize: 12,\r\n    fontWeight: 700,\r\n    alignSelf: \"flex-start\",\r\n  },\r\n  input: {\r\n    fontWeight: 600,\r\n    height: 36,\r\n    fontSize: 12,\r\n  },\r\n  uploadLabel: {\r\n    cursor: \"pointer\",\r\n  },\r\n  btn: {\r\n    cursor: \"pointer\",\r\n    border: \"none\",\r\n    backgroundColor: \"transparent\",\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n      border: \"none\",\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  icon: {\r\n    color: \"grey\",\r\n    fontSize: 40,\r\n  },\r\n}));\r\nconst PageThree = ({ setStep, step, onComplete, user }) => {\r\n  const classes = useStyles();\r\n  const [serverName, setServerName] = useState(\"\");\r\n  const [serverImg, setServerImg] = useState(\"\");\r\n\r\n  const fileHandler = (e) => {\r\n    setServerImg(e.target.files[0]);\r\n  };\r\n\r\n  const upload = () => {\r\n    document.getElementById(\"selectImage\").click();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <DialogTitle>\r\n        <Typography className={classes.title}>Customize your server</Typography>\r\n        <Typography variant=\"body2\" className={classes.subtitle}>\r\n          Give your new server a personality with a name and an icon. You can\r\n          alway change it later.\r\n        </Typography>\r\n      </DialogTitle>\r\n\r\n      <Paper className={classes.uploadWrapper}>\r\n        <Typography className={classes.uploadText}>\r\n\r\n          <div style={{ display: \"grid\" }}>\r\n            <button className={classes.btn} id=\"plus\" onClick={upload}>\r\n              <FontAwesomeIcon\r\n                className={classes.icon}\r\n                icon={faCamera}\r\n              ></FontAwesomeIcon>\r\n            </button>\r\n            <input id=\"selectImage\" hidden type=\"file\" onChange={fileHandler} />\r\n          </div>\r\n        </Typography>\r\n      </Paper>\r\n      <InputLabel className={classes.label} htmlFor=\"server-name\">\r\n        SERVER NAME\r\n      </InputLabel>\r\n      <TextField\r\n        autoFocus\r\n        placeholder={`${user.displayName}'s server`}\r\n        onChange={({ target: { value } }) => setServerName(value)}\r\n        InputProps={{\r\n          className: classes.input,\r\n        }}\r\n        id=\"server-name\"\r\n        variant=\"outlined\"\r\n        margin=\"dense\"\r\n      ></TextField>\r\n      <Paper className={classes.footer}>\r\n        <Typography\r\n          onClick={() => setStep(step - 1)}\r\n          className={classes.footerText}\r\n          variant=\"body2\"\r\n        >\r\n          Back\r\n        </Typography>\r\n        <Button\r\n          onClick={() => onComplete({ name: serverName, file: serverImg })}\r\n          className={classes.footerButton}\r\n        >\r\n          Create\r\n        </Button>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageThree;\r\n","C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageTwo.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageOne.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\DialogItem.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\FileInput.js",["193","194","195","196","197"],"import { faCamera, faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { makeStyles, Typography } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst FileInput = (props) => {\r\n  const {\r\n    icon = faCamera,\r\n    color = \"grey\",\r\n    size = 40,\r\n    style,\r\n    fileHandler,\r\n  } = props;\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    btn: {\r\n      cursor: \"pointer\",\r\n      border: \"none\",\r\n      backgroundColor: \"transparent\",\r\n      \"&:focus\": {\r\n        outline: \"none\",\r\n        border: \"none\",\r\n        backgroundColor: \"transparent\",\r\n      },\r\n    },\r\n    icon: {\r\n      color: color,\r\n      fontSize: size,\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  const [file, setFile] = useState(\"\");\r\n\r\n  const upload = () => {\r\n    document.getElementById(\"select-image\").click();\r\n  };\r\n  const handleChange = (e) => {\r\n    setFile(e.target.files[0]);\r\n  };\r\n// no idea why this garbage wont work\r\n  return (\r\n    <div style={{ display: \"grid\", ...style }}>\r\n      <button className={classes.btn} onClick={upload}>\r\n        <FontAwesomeIcon className={classes.icon} icon={icon}></FontAwesomeIcon>\r\n      </button>\r\n\r\n      <input id=\"select-image\" hidden type=\"file\" onChange={handleChange} />\r\n    </div>\r\n  );\r\n};\r\nexport default FileInput;\r\n","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItem.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemImage.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemLink.js",["198","199"],"C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemText.js",[],{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":2,"column":8,"nodeType":"206","messageId":"207","endLine":2,"endColumn":18},{"ruleId":"204","severity":1,"message":"208","line":6,"column":41,"nodeType":"206","messageId":"207","endLine":6,"endColumn":52},{"ruleId":"204","severity":1,"message":"209","line":3,"column":10,"nodeType":"206","messageId":"207","endLine":3,"endColumn":16},{"ruleId":"204","severity":1,"message":"210","line":9,"column":8,"nodeType":"206","messageId":"207","endLine":9,"endColumn":17},{"ruleId":"204","severity":1,"message":"211","line":197,"column":18,"nodeType":"206","messageId":"207","endLine":197,"endColumn":25},{"ruleId":"204","severity":1,"message":"211","line":295,"column":18,"nodeType":"206","messageId":"207","endLine":295,"endColumn":25},{"ruleId":"204","severity":1,"message":"210","line":13,"column":8,"nodeType":"206","messageId":"207","endLine":13,"endColumn":17},{"ruleId":"204","severity":1,"message":"212","line":1,"column":20,"nodeType":"206","messageId":"207","endLine":1,"endColumn":32},{"ruleId":"204","severity":1,"message":"213","line":3,"column":22,"nodeType":"206","messageId":"207","endLine":3,"endColumn":32},{"ruleId":"204","severity":1,"message":"214","line":4,"column":10,"nodeType":"206","messageId":"207","endLine":4,"endColumn":19},{"ruleId":"204","severity":1,"message":"215","line":12,"column":5,"nodeType":"206","messageId":"207","endLine":12,"endColumn":16},{"ruleId":"204","severity":1,"message":"216","line":32,"column":10,"nodeType":"206","messageId":"207","endLine":32,"endColumn":14},{"ruleId":"204","severity":1,"message":"217","line":3,"column":8,"nodeType":"206","messageId":"207","endLine":3,"endColumn":13},{"ruleId":"204","severity":1,"message":"218","line":14,"column":11,"nodeType":"206","messageId":"207","endLine":14,"endColumn":18},"no-native-reassign",["219"],"no-negated-in-lhs",["220"],"no-unused-vars","'isImageUrl' is defined but never used.","Identifier","unusedVar","'userService' is defined but never used.","'Button' is defined but never used.","'FileInput' is defined but never used.","'content' is assigned a value but never used.","'faPlusCircle' is defined but never used.","'Typography' is defined but never used.","'useEffect' is defined but never used.","'fileHandler' is assigned a value but never used.","'file' is assigned a value but never used.","'axios' is defined but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]