[{"C:\\Code\\projects\\chatteroni\\src\\index.js":"1","C:\\Code\\projects\\chatteroni\\src\\App.js":"2","C:\\Code\\projects\\chatteroni\\src\\reportWebVitals.js":"3","C:\\Code\\projects\\chatteroni\\src\\redux\\history.js":"4","C:\\Code\\projects\\chatteroni\\src\\redux\\store.js":"5","C:\\Code\\projects\\chatteroni\\src\\styles\\muiTheme.js":"6","C:\\Code\\projects\\chatteroni\\src\\firebase.js":"7","C:\\Code\\projects\\chatteroni\\src\\components\\Drawer.js":"8","C:\\Code\\projects\\chatteroni\\src\\components\\Channels.js":"9","C:\\Code\\projects\\chatteroni\\src\\pages\\Login.js":"10","C:\\Code\\projects\\chatteroni\\src\\components\\Header.js":"11","C:\\Code\\projects\\chatteroni\\src\\redux\\actions\\authActions.js":"12","C:\\Code\\projects\\chatteroni\\src\\redux\\reducers\\rootReducer.js":"13","C:\\Code\\projects\\chatteroni\\src\\components\\Servers.js":"14","C:\\Code\\projects\\chatteroni\\src\\components\\Chat.js":"15","C:\\Code\\projects\\chatteroni\\src\\utilities.js":"16","C:\\Code\\projects\\chatteroni\\src\\redux\\actions\\appActions.js":"17","C:\\Code\\projects\\chatteroni\\src\\redux\\reducers\\authReducer.js":"18","C:\\Code\\projects\\chatteroni\\src\\redux\\reducers\\appReducer.js":"19","C:\\Code\\projects\\chatteroni\\src\\components\\HeaderOptions.js":"20","C:\\Code\\projects\\chatteroni\\src\\components\\ServerModal.js":"21","C:\\Code\\projects\\chatteroni\\src\\components\\ChannelHeader.js":"22"},{"size":1096,"mtime":1612227653895,"results":"23","hashOfConfig":"24"},{"size":1829,"mtime":1612304593469,"results":"25","hashOfConfig":"24"},{"size":375,"mtime":1612218641485,"results":"26","hashOfConfig":"24"},{"size":115,"mtime":1612227653897,"results":"27","hashOfConfig":"24"},{"size":896,"mtime":1612227653900,"results":"28","hashOfConfig":"24"},{"size":359,"mtime":1612266835429,"results":"29","hashOfConfig":"24"},{"size":647,"mtime":1612227653894,"results":"30","hashOfConfig":"24"},{"size":696,"mtime":1612266835420,"results":"31","hashOfConfig":"24"},{"size":5327,"mtime":1612266835418,"results":"32","hashOfConfig":"24"},{"size":1315,"mtime":1612266835424,"results":"33","hashOfConfig":"24"},{"size":2335,"mtime":1612266835421,"results":"34","hashOfConfig":"24"},{"size":111,"mtime":1612227653897,"results":"35","hashOfConfig":"24"},{"size":359,"mtime":1612235082774,"results":"36","hashOfConfig":"24"},{"size":3208,"mtime":1612304593472,"results":"37","hashOfConfig":"24"},{"size":6694,"mtime":1612307082572,"results":"38","hashOfConfig":"24"},{"size":114,"mtime":1612266835429,"results":"39","hashOfConfig":"24"},{"size":236,"mtime":1612266835425,"results":"40","hashOfConfig":"24"},{"size":387,"mtime":1612266835427,"results":"41","hashOfConfig":"24"},{"size":596,"mtime":1612266835426,"results":"42","hashOfConfig":"24"},{"size":1423,"mtime":1612266835422,"results":"43","hashOfConfig":"24"},{"size":2783,"mtime":1612304593471,"results":"44","hashOfConfig":"24"},{"size":1433,"mtime":1612266835417,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"10ro2cp",{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"49"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"49"},"C:\\Code\\projects\\chatteroni\\src\\index.js",["99","100"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { MuiThemeProvider } from \"@material-ui/core\";\r\nimport theme from \"./styles/muiTheme\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store, persistor } from \"./redux/store\";\r\nimport { ConnectedRouter } from \"connected-react-router\";\r\nimport history from \"./redux/history\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n        <PersistGate loading={null} persistor={persistor}>\r\n          <MuiThemeProvider theme={theme}>\r\n            <App />\r\n          </MuiThemeProvider>\r\n        </PersistGate>\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["101","102"],"C:\\Code\\projects\\chatteroni\\src\\App.js",["103","104","105","106"],"import { Button } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Drawer from \"./components/Drawer\";\r\nimport Channels from \"./components/Channels\";\r\nimport Servers from \"./components/Servers\";\r\nimport Header from \"./components/Header\";\r\nimport db, { auth as firebaseAuth, provider } from \"./firebase\";\r\nimport Login from \"./pages/Login\";\r\nimport { logInUserRedux } from \"./redux/actions/authActions\";\r\nimport Chat from \"./components/Chat\";\r\n\r\nfunction App({ auth, logInUser, selectedChannel }) {\r\n  const [isLoggedIn, setLoggedIn] = useState(firebaseAuth.currentUser);\r\n  const handleLogin = (user) => {\r\n    logInUser(user);\r\n    setLoggedIn(true);\r\n  };\r\n\r\n  const logout = () => {\r\n    logInUser({});\r\n    firebaseAuth.signOut().then((user) => setLoggedIn(false));\r\n  };\r\n\r\n  return (\r\n    <div style={{ backgroundColor: \"#4f4f4f\", height: \"100vh\", width: \"100%\" }}>\r\n      {isLoggedIn && auth.user ? (\r\n        <>\r\n          <Header />\r\n          <Channels />\r\n          <Servers />\r\n          { selectedChannel.id ? <Chat /> : '' }\r\n          <Button\r\n           style={{ width: 120, backgroundColor: '#3d1059',  color: 'white', fontWeight: 600,\r\n           position: \"absolute\", top: 48, right: 20 }}\r\n            onClick={logout}\r\n          >\r\n            {\" \"}\r\n            Log out\r\n          </Button>\r\n        </>\r\n      ) : (\r\n        <Login handleLogin={handleLogin} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n  selectedChannel: state.app.selectedChannel,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  logInUser: dispatch(logInUserRedux),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n// collections\r\n// servers -->\r\n// --> channels\r\n// ---> message\r\n","C:\\Code\\projects\\chatteroni\\src\\reportWebVitals.js",[],"C:\\Code\\projects\\chatteroni\\src\\redux\\history.js",[],"C:\\Code\\projects\\chatteroni\\src\\redux\\store.js",[],"C:\\Code\\projects\\chatteroni\\src\\styles\\muiTheme.js",[],"C:\\Code\\projects\\chatteroni\\src\\firebase.js",[],"C:\\Code\\projects\\chatteroni\\src\\components\\Drawer.js",[],"C:\\Code\\projects\\chatteroni\\src\\components\\Channels.js",["107","108","109","110","111","112","113","114","115"],"import { faHashtag, faVolumeUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  Button,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemAvatar,\r\n  Paper,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport { ArrowDropDown, ExpandMore, ViewHeadline } from \"@material-ui/icons\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport db from \"../firebase\";\r\nimport { setChannelRedux } from \"../redux/actions/appActions\";\r\nimport { truncateString } from \"../utilities\";\r\nimport ChannelHeader from \"./ChannelHeader\";\r\nimport Drawer from \"./Drawer\";\r\nimport HeaderOptions from \"./HeaderOptions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  channelItem: {\r\n    color: \"white\",\r\n    width: \"100%\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#4f4f4f\",\r\n    },\r\n    \"&:focus\": {\r\n      backgroundColor: \"#4f4f4f\",\r\n    },\r\n    borderRadius: 6,\r\n  },\r\n}));\r\n\r\nconst Channels = ({ selectedServer, setChannel, user }) => {\r\n  const classes = useStyles();\r\n  const getChannels = async () => {\r\n    const snapshot = await db\r\n      .collection(\"channels\")\r\n      .where(\"serverId\", \"==\", selectedServer.id)\r\n      .get();\r\n    return snapshot.docs.map((doc) => ({ ...doc.data(), id: doc.id }));\r\n  };\r\n\r\n  const [channels, setChannels] = useState([]);\r\n  const [headerOptions, showHeaderOptions] = useState(false);\r\n\r\n  useEffect(async () => {\r\n    if (selectedServer.id) {\r\n      const channels = await getChannels();\r\n      setChannels(channels);\r\n    }\r\n  }, [selectedServer.id]);\r\n\r\n  const addChannel = async () => {\r\n    const name = prompt(\"What do you want you your channel to be named?\");\r\n    await db.collection(\"channels\").add({\r\n      serverId: selectedServer.id,\r\n      name: name,\r\n      timestamp: new Date(),\r\n      voice: true\r\n    });\r\n    const channels = await getChannels();\r\n    setChannels(channels);\r\n    toggleHeaderOptions()\r\n  };\r\n\r\n  const toggleHeaderOptions = () => showHeaderOptions(!headerOptions);\r\n\r\n  return (\r\n    <Drawer width=\"360px\" style={{ backgroundColor: \"#3b3b3b\" }}>\r\n      <div style={{ paddingLeft: \"86px\" }}>\r\n        <ChannelHeader serverName={selectedServer.name} toggleHeaderOptions={toggleHeaderOptions} />\r\n        <Divider\r\n          style={{ width: \"100%\", height: 1, backgroundColor: \"#1e1e1e\" }}\r\n        />\r\n        <Grid container>\r\n          <List style={{ width: \"100%\", margin: 4 }}>\r\n            {channels.map((chnl) => (\r\n              <ListItem\r\n                onClick={() => setChannel(chnl)}\r\n                className={classes.channelItem}\r\n                disableRipple={true}\r\n                dense\r\n                button\r\n              >\r\n                <ListItemText\r\n                  primary={\r\n                    <Typography style={{ fontWeight: 600, fontSize: 14 }}>\r\n                      <FontAwesomeIcon\r\n                        style={{ marginRight: 8 }}\r\n                        color=\"#636363\"\r\n                        icon={chnl.voice ? faVolumeUp : faHashtag}\r\n                      ></FontAwesomeIcon>\r\n                      {truncateString(chnl.name, 26)}\r\n                    </Typography>\r\n                  }\r\n                />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Grid>\r\n        <Paper\r\n          style={{\r\n            position: \"absolute\",\r\n            backgroundColor: \"#282828\",\r\n            bottom: 0,\r\n            height: 50,\r\n            width: \"calc(100% - 86px)\",\r\n          }}\r\n        >\r\n          <Paper\r\n            style={{\r\n              backgroundImage: `url(${user.photoURL})`,\r\n              height: 40,\r\n              position: \"relative\",\r\n              width: 40,\r\n              minHeight: 40,\r\n              borderRadius: 20,\r\n              backgroundSize: \"contain\",\r\n              margin: 6,\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"space-around\",\r\n              cursor: \"pointer\",\r\n              height: 40,\r\n              width: 40,\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                height: 12,\r\n                width: 12,\r\n                position: \"absolute\",\r\n                bottom: 0,\r\n                left: 24,\r\n                border: \"1px solid black\",\r\n                backgroundColor: \"#20b673\",\r\n                borderRadius: 6,\r\n              }}\r\n            ></div>\r\n            <Typography\r\n              variant=\"body1\"\r\n              style={{\r\n                position: \"absolute\",\r\n                top: 14,\r\n                left: 60,\r\n                fontSize: 12,\r\n                color: \"white\",\r\n                fontWeight: 800,\r\n              }}\r\n            >\r\n              <span style={{ whiteSpace: \"nowrap\" }}>{user.displayName}</span>\r\n            </Typography>\r\n          </Paper>\r\n        </Paper>\r\n      </div>\r\n      <HeaderOptions addChannel={addChannel} headerOptions={headerOptions}/>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setChannel: dispatch(setChannelRedux)\r\n})\r\n\r\nconst mapStateToProps = (state) => ({\r\n  selectedServer: state.app.selectedServer,\r\n  user: state.auth.user,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Channels);\r\n","C:\\Code\\projects\\chatteroni\\src\\pages\\Login.js",[],"C:\\Code\\projects\\chatteroni\\src\\components\\Header.js",["116"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport { connect } from \"react-redux\";\r\nimport { Divider, Typography, Grid } from \"@material-ui/core\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faHashtag, faVolumeUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { truncateString } from \"../utilities\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    position: \"absolute\",\r\n    top: 0,\r\n    width: \"calc(100% - 360px)\",\r\n    left: 360,\r\n  },\r\n  appbar: {\r\n    height: 40,\r\n  },\r\n}));\r\n\r\nconst Header = ({ selectedChannel }) => {\r\n  const classes = useStyles();\r\n\r\n  const renderSelectedChannel = () => {\r\n    return selectedChannel.name ? (\r\n      <>\r\n        <div style={{ marginBottom: 22, marginRight: 16 }}>\r\n          <Typography\r\n            style={{\r\n              color: \"white\",\r\n              fontSize: 14,\r\n              fontWeight: 800,\r\n            }}\r\n            variant=\"body1\"\r\n          >\r\n            <FontAwesomeIcon\r\n              style={{ marginRight: 10 }}\r\n              color=\"white\"\r\n              icon={selectedChannel.voice ? faVolumeUp : faHashtag}\r\n            ></FontAwesomeIcon>\r\n            {selectedChannel.name}\r\n          </Typography>\r\n        </div>\r\n        <div style={{ width: 20, marginBottom: 22 }}>\r\n          <Divider style={{ height: 20, width: 2, backgroundColor: \"white\" }} />\r\n        </div>\r\n        <div style={{ width: 100, marginBottom: 20 }}>\r\n          <Typography\r\n            style={{\r\n              color: \"grey\",\r\n              fontSize: 14,\r\n              fontWeight: 700,\r\n            }}\r\n            variant=\"body1\"\r\n          >\r\n            {selectedChannel.description ? truncateString(selectedChannel.description, 12) : \"No description\"}\r\n          </Typography>\r\n        </div>\r\n      </>\r\n    ) : '';\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar className={classes.appbar} position=\"static\">\r\n        <Toolbar>{renderSelectedChannel()}</Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  selectedChannel: state.app.selectedChannel,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Header);\r\n","C:\\Code\\projects\\chatteroni\\src\\redux\\actions\\authActions.js",[],"C:\\Code\\projects\\chatteroni\\src\\redux\\reducers\\rootReducer.js",[],"C:\\Code\\projects\\chatteroni\\src\\components\\Servers.js",["117","118","119","120"],"import {\r\n  Avatar,\r\n  Button,\r\n  Divider,\r\n  makeStyles,\r\n  Typography,\r\n  Paper,\r\n  Tooltip\r\n} from \"@material-ui/core\";\r\nimport Drawer from \"./Drawer\";\r\nimport ServerModal from './ServerModal'\r\nimport VideogameAssetIcon from \"@material-ui/icons/VideogameAsset\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport db from \"../firebase\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { setChannelRedux, setServerRedux } from \"../redux/actions/appActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  btn: {\r\n    height: 40,\r\n    width: 40,\r\n    minHeight: 40,\r\n    color: \"#20b673\",\r\n    borderRadius: 20,\r\n    backgroundSize: 'contain',\r\n    backgroundColor: theme.palette.secondary.dark,\r\n    margin: 6,\r\n    display: 'grid',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    cursor: 'pointer',\r\n    \"&:hover\": {\r\n      transition: \"all .25s\",\r\n      color: 'white',\r\n      borderRadius: \"40%\",\r\n    },\r\n  },\r\n}));\r\nconst Servers = ({ setServer, setChannel, serverId }) => {\r\n  const [servers, setServers] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    const servers = await getServers();\r\n    setServers(servers);\r\n  }, []);\r\n\r\n  const getServers = async () => {\r\n    const snapshot = await db.collection(\"servers\").get();\r\n    return snapshot.docs.map((doc) => ({...doc.data(), id: doc.id }));\r\n\r\n  };\r\n\r\n  const addServer = async () => {\r\n    const serverName = prompt(\"Enter a name\");\r\n    await db.collection(\"servers\").add({\r\n      name: serverName,\r\n      imgUrl: 'https://images.unsplash.com/photo-1493612276216-ee3925520721?ixid=MXwxMjA3fDB8MHxzZWFyY2h8M3x8cmFuZG9tfGVufDB8fDB8&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60',\r\n      country: \"USA\",\r\n      timestamp: new Date()\r\n    });\r\n    const data = await getServers();\r\n\r\n    setServers(data);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Drawer\r\n      style={{\r\n          hieght: '100vh',\r\n          overflowY: 'hidden',\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        borderRight: \"1px solid #1e1e1e\",\r\n        backgroundColor: '#1e1e1e'\r\n      }}\r\n      width=\"85px\"\r\n      variant=\"secondary\"\r\n    >\r\n      <div className={classes.btn}>\r\n        <VideogameAssetIcon />\r\n      </div>\r\n      <Divider\r\n        style={{\r\n          backgroundColor: \"#1e1e1e\",\r\n          margin: \"0 16px 0 16px\",\r\n          height: 1,\r\n          width: \"calc(100% - 32px)\",\r\n        }}\r\n      />\r\n      {servers.map((svr) => (\r\n        <Tooltip style={{ fontSize: 12}} placement=\"right\" title={svr.name}>\r\n          <Paper style={{backgroundImage: `url(${svr.imgUrl})` }} onClick={() => [setServer(svr), setChannel({})]} className={classes.btn} >\r\n          </Paper>\r\n          </Tooltip>\r\n      ))}\r\n      <div className={classes.btn}>\r\n        <AddIcon onClick={addServer} />\r\n      </div>\r\n      <ServerModal addServer ={addServer} />\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    serverId: state.app.serverId\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setServer: dispatch(setServerRedux),\r\n    setChannel: dispatch(setChannelRedux),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Servers);\r\n","C:\\Code\\projects\\chatteroni\\src\\components\\Chat.js",["121","122","123"],"C:\\Code\\projects\\chatteroni\\src\\utilities.js",[],"C:\\Code\\projects\\chatteroni\\src\\redux\\actions\\appActions.js",[],"C:\\Code\\projects\\chatteroni\\src\\redux\\reducers\\authReducer.js",[],"C:\\Code\\projects\\chatteroni\\src\\redux\\reducers\\appReducer.js",[],"C:\\Code\\projects\\chatteroni\\src\\components\\HeaderOptions.js",["124"],"import { faHashtag, faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  Grow,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  headerItem: {\r\n    color: \"white\",\r\n    width: \"100%\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.primary.dark,\r\n    },\r\n    borderRadius: 6,\r\n  },\r\n}));\r\nconst HeaderOptions = ({ headerOptions, addChannel }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grow in={headerOptions}>\r\n      <Paper\r\n        style={{\r\n          position: \"absolute\",\r\n          top: 46,\r\n          left: 92,\r\n          padding: 6,\r\n          width: \"calc(100% - 110px)\",\r\n          backgroundColor: \"#1e1e1e\",\r\n        }}\r\n      >\r\n        <List>\r\n          <ListItem\r\n            onClick={addChannel}\r\n            className={classes.headerItem}\r\n            dense\r\n            button\r\n          >\r\n            <ListItemText\r\n              primary={\r\n                <Typography style={{ fontSize: 12, fontWeight: 600 }}>\r\n                  Add a channel\r\n                </Typography>\r\n              }\r\n            ></ListItemText>\r\n            <FontAwesomeIcon icon={faPlus}></FontAwesomeIcon>\r\n          </ListItem>\r\n        </List>\r\n      </Paper>\r\n    </Grow>\r\n  );\r\n};\r\n\r\nexport default HeaderOptions;\r\n","C:\\Code\\projects\\chatteroni\\src\\components\\ServerModal.js",["125"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { FormControl, InputLabel, Input, Button, Grid } from '@material-ui/core';\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n}\r\n\r\nfunction getModalStyle() {\r\n    const top = 50\r\n    const left = 50\r\n\r\n    return {\r\n        top: `${top}%`,\r\n        left: `${left}%`,\r\n        transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 400,\r\n        backgroundColor: theme.palette.secondary.dark,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n    btn: {\r\n        height: 40,\r\n        width: 40,\r\n        minHeight: 40,\r\n        color: \"#20b673\",\r\n        borderRadius: 20,\r\n        backgroundSize: 'contain',\r\n        backgroundColor: theme.palette.secondary.dark,\r\n        margin: 6,\r\n        display: 'grid',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        cursor: 'pointer',\r\n        \"&:hover\": {\r\n            transition: \"all .25s\",\r\n            color: 'white',\r\n            borderRadius: \"40%\",\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function ServerModal() {\r\n    const classes = useStyles();\r\n    const [modalStyle] = React.useState(getModalStyle);\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const body = (\r\n        <>\r\n            <div style={modalStyle} className={classes.paper}>\r\n                <Grid container>\r\n                    <Grid item sm={8}>\r\n                        <FormControl>\r\n                            <InputLabel htmlFor=\"my-input\">Enter Server Name:</InputLabel>\r\n                            <Input id=\"my-input\" aria-describedby=\"my-helper-text\" />\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item sm={4}>\r\n                        <Button className={classes.btn}>Add Server</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <button type=\"button\" className={classes.btn} onClick={handleOpen}>\r\n                <AddIcon />\r\n            </button>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                {body}\r\n            </Modal>\r\n        </div>\r\n    );\r\n}","C:\\Code\\projects\\chatteroni\\src\\components\\ChannelHeader.js",["126"],"import {\r\n  faChevronDown,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\nimport { Album } from \"@material-ui/icons\";\r\n\r\nconst ChannelHeader = ({ serverName, toggleHeaderOptions }) => {\r\n  return (\r\n    <Paper\r\n      elevation={0}\r\n      onClick={toggleHeaderOptions}\r\n      style={{\r\n        cursor: \"pointer\",\r\n        position: \"relative\",\r\n        height: 40,\r\n        backgroundColor: \"#3b3b3b\",\r\n        borderBottom: \"1px solid #1e1e1e\",\r\n      }}\r\n    >\r\n      <Album\r\n        style={{\r\n          position: \"absolute\",\r\n          color: \"white\",\r\n          left: 12,\r\n          top: \"calc(50% - 10px)\",\r\n          margin: \"2px 6px 0px 12px\",\r\n          fontSize: 14,\r\n        }}\r\n      ></Album>\r\n      <Typography\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"calc(50% - 12px)\",\r\n          left: 46,\r\n          color: \"white\",\r\n          fontSize: 14,\r\n          fontWeight: 800,\r\n        }}\r\n      >\r\n        {serverName}\r\n      </Typography>\r\n      <FontAwesomeIcon\r\n        icon={faChevronDown}\r\n        style={{\r\n          fontSize: 12,\r\n          position: \"absolute\",\r\n          top: \"calc(50% - 8px)\",\r\n          right: 18,\r\n          color: \"white\",\r\n          fontSize: 14,\r\n        }}\r\n      ></FontAwesomeIcon>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ChannelHeader;\r\n",{"ruleId":"127","severity":1,"message":"128","line":10,"column":10,"nodeType":"129","messageId":"130","endLine":10,"endColumn":25},{"ruleId":"127","severity":1,"message":"131","line":11,"column":8,"nodeType":"129","messageId":"130","endLine":11,"endColumn":15},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"127","severity":1,"message":"136","line":2,"column":10,"nodeType":"129","messageId":"130","endLine":2,"endColumn":19},{"ruleId":"127","severity":1,"message":"137","line":4,"column":8,"nodeType":"129","messageId":"130","endLine":4,"endColumn":14},{"ruleId":"127","severity":1,"message":"138","line":8,"column":8,"nodeType":"129","messageId":"130","endLine":8,"endColumn":10},{"ruleId":"127","severity":1,"message":"139","line":8,"column":36,"nodeType":"129","messageId":"130","endLine":8,"endColumn":44},{"ruleId":"127","severity":1,"message":"140","line":7,"column":3,"nodeType":"129","messageId":"130","endLine":7,"endColumn":9},{"ruleId":"127","severity":1,"message":"141","line":11,"column":3,"nodeType":"129","messageId":"130","endLine":11,"endColumn":17},{"ruleId":"127","severity":1,"message":"142","line":15,"column":10,"nodeType":"129","messageId":"130","endLine":15,"endColumn":23},{"ruleId":"127","severity":1,"message":"143","line":15,"column":25,"nodeType":"129","messageId":"130","endLine":15,"endColumn":35},{"ruleId":"127","severity":1,"message":"144","line":15,"column":37,"nodeType":"129","messageId":"130","endLine":15,"endColumn":49},{"ruleId":"145","severity":1,"message":"146","line":52,"column":13,"nodeType":"147","endLine":57,"endColumn":4},{"ruleId":"145","severity":1,"message":"148","line":57,"column":6,"nodeType":"149","endLine":57,"endColumn":25,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":130,"column":15,"nodeType":"153","messageId":"154","endLine":130,"endColumn":21},{"ruleId":"151","severity":1,"message":"155","line":131,"column":15,"nodeType":"153","messageId":"154","endLine":131,"endColumn":20},{"ruleId":"127","severity":1,"message":"156","line":6,"column":31,"nodeType":"129","messageId":"130","endLine":6,"endColumn":35},{"ruleId":"127","severity":1,"message":"157","line":2,"column":3,"nodeType":"129","messageId":"130","endLine":2,"endColumn":9},{"ruleId":"127","severity":1,"message":"140","line":3,"column":3,"nodeType":"129","messageId":"130","endLine":3,"endColumn":9},{"ruleId":"127","severity":1,"message":"158","line":6,"column":3,"nodeType":"129","messageId":"130","endLine":6,"endColumn":13},{"ruleId":"145","severity":1,"message":"146","line":43,"column":13,"nodeType":"147","endLine":46,"endColumn":4},{"ruleId":"127","severity":1,"message":"159","line":3,"column":3,"nodeType":"129","messageId":"130","endLine":3,"endColumn":8},{"ruleId":"127","severity":1,"message":"160","line":71,"column":30,"nodeType":"129","messageId":"130","endLine":71,"endColumn":34},{"ruleId":"127","severity":1,"message":"161","line":98,"column":13,"nodeType":"129","messageId":"130","endLine":98,"endColumn":20},{"ruleId":"127","severity":1,"message":"162","line":1,"column":10,"nodeType":"129","messageId":"130","endLine":1,"endColumn":19},{"ruleId":"127","severity":1,"message":"163","line":7,"column":10,"nodeType":"129","messageId":"130","endLine":7,"endColumn":14},{"ruleId":"151","severity":1,"message":"164","line":51,"column":11,"nodeType":"153","messageId":"154","endLine":51,"endColumn":19},"no-unused-vars","'ConnectedRouter' is defined but never used.","Identifier","unusedVar","'history' is defined but never used.","no-native-reassign",["165"],"no-negated-in-lhs",["166"],"'useEffect' is defined but never used.","'Drawer' is defined but never used.","'db' is defined but never used.","'provider' is defined but never used.","'Button' is defined but never used.","'ListItemAvatar' is defined but never used.","'ArrowDropDown' is defined but never used.","'ExpandMore' is defined but never used.","'ViewHeadline' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'getChannels'. Either include it or remove the dependency array.","ArrayExpression",["167"],"no-dupe-keys","Duplicate key 'height'.","ObjectExpression","unexpected","Duplicate key 'width'.","'Grid' is defined but never used.","'Avatar' is defined but never used.","'Typography' is defined but never used.","'Input' is defined but never used.","'user' is assigned a value but never used.","'classes' is assigned a value but never used.","'faHashtag' is defined but never used.","'rand' is defined but never used.","Duplicate key 'fontSize'.","no-global-assign","no-unsafe-negation",{"desc":"168","fix":"169"},"Update the dependencies array to be: [getChannels, selectedServer.id]",{"range":"170","text":"171"},[1605,1624],"[getChannels, selectedServer.id]"]