[{"C:\\Code\\projects\\chatterona\\src\\index.js":"1","C:\\Code\\projects\\chatterona\\src\\App.js":"2","C:\\Code\\projects\\chatterona\\src\\reportWebVitals.js":"3","C:\\Code\\projects\\chatterona\\src\\styles\\muiTheme.js":"4","C:\\Code\\projects\\chatterona\\src\\redux\\store.js":"5","C:\\Code\\projects\\chatterona\\src\\components\\Router.js":"6","C:\\Code\\projects\\chatterona\\src\\redux\\history.js":"7","C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\rootReducer.js":"8","C:\\Code\\projects\\chatterona\\src\\utilities.js":"9","C:\\Code\\projects\\chatterona\\src\\pages\\MobileLanding.js":"10","C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\authReducer.js":"11","C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\appReducer.js":"12","C:\\Code\\projects\\chatterona\\src\\pages\\Main.js":"13","C:\\Code\\projects\\chatterona\\src\\pages\\Login.js":"14","C:\\Code\\projects\\chatterona\\src\\config.js":"15","C:\\Code\\projects\\chatterona\\src\\redux\\actions\\appActions.js":"16","C:\\Code\\projects\\chatterona\\src\\redux\\actions\\authActions.js":"17","C:\\Code\\projects\\chatterona\\src\\components\\Header.js":"18","C:\\Code\\projects\\chatterona\\src\\components\\Servers\\Servers.js":"19","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\Chat.js":"20","C:\\Code\\projects\\chatterona\\src\\services\\index.js":"21","C:\\Code\\projects\\chatterona\\src\\components\\Channels\\Channels.js":"22","C:\\Code\\projects\\chatterona\\src\\components\\Servers\\ServerListItem.js":"23","C:\\Code\\projects\\chatterona\\src\\components\\Drawer.js":"24","C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\AddServerDialog.js":"25","C:\\Code\\projects\\chatterona\\src\\firebase.js":"26","C:\\Code\\projects\\chatterona\\src\\services\\channel-service.js":"27","C:\\Code\\projects\\chatterona\\src\\services\\server-service.js":"28","C:\\Code\\projects\\chatterona\\src\\services\\user-service.js":"29","C:\\Code\\projects\\chatterona\\src\\components\\Channels\\CreateChannelDialog.js":"30","C:\\Code\\projects\\chatterona\\src\\components\\Channels\\ChannelHeader.js":"31","C:\\Code\\projects\\chatterona\\src\\components\\Channels\\ChannelListItem.js":"32","C:\\Code\\projects\\chatterona\\src\\components\\Channels\\HeaderOptions.js":"33","C:\\Code\\projects\\chatterona\\src\\components\\Stepper.js":"34","C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageThree.js":"35","C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageTwo.js":"36","C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageOne.js":"37","C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\DialogItem.js":"38","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItem.js":"39","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemImage.js":"40","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemLink.js":"41","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemText.js":"42","C:\\chatterona\\src\\index.js":"43","C:\\chatterona\\src\\reportWebVitals.js":"44","C:\\chatterona\\src\\App.js":"45","C:\\chatterona\\src\\styles\\muiTheme.js":"46","C:\\chatterona\\src\\redux\\store.js":"47","C:\\chatterona\\src\\components\\Router.js":"48","C:\\chatterona\\src\\redux\\history.js":"49","C:\\chatterona\\src\\redux\\reducers\\rootReducer.js":"50","C:\\chatterona\\src\\redux\\reducers\\authReducer.js":"51","C:\\chatterona\\src\\utilities.js":"52","C:\\chatterona\\src\\redux\\reducers\\appReducer.js":"53","C:\\chatterona\\src\\pages\\MobileLanding.js":"54","C:\\chatterona\\src\\pages\\Login.js":"55","C:\\chatterona\\src\\pages\\Main.js":"56","C:\\chatterona\\src\\components\\Header.js":"57","C:\\chatterona\\src\\redux\\actions\\appActions.js":"58","C:\\chatterona\\src\\redux\\actions\\authActions.js":"59","C:\\chatterona\\src\\config.js":"60","C:\\chatterona\\src\\components\\Servers\\ServerUsers.js":"61","C:\\chatterona\\src\\components\\Servers\\Servers.js":"62","C:\\chatterona\\src\\components\\Channels\\Channels.js":"63","C:\\chatterona\\src\\components\\Chat\\Chat.js":"64","C:\\chatterona\\src\\components\\Drawer.js":"65","C:\\chatterona\\src\\components\\Channels\\ChannelListItem.js":"66","C:\\chatterona\\src\\components\\Channels\\CreateChannelDialog.js":"67","C:\\chatterona\\src\\components\\Channels\\HeaderOptions.js":"68","C:\\chatterona\\src\\components\\Channels\\ChannelHeader.js":"69","C:\\chatterona\\src\\components\\Chat\\ChatItem.js":"70","C:\\chatterona\\src\\http\\channels-http.js":"71","C:\\chatterona\\src\\http\\servers-http.js":"72","C:\\chatterona\\src\\http\\messages-http.js":"73","C:\\chatterona\\src\\components\\Servers\\ServerListItem.js":"74","C:\\chatterona\\src\\components\\AddServerDialog\\AddServerDialog.js":"75","C:\\chatterona\\src\\components\\Chat\\ChatItemImage.js":"76","C:\\chatterona\\src\\components\\Chat\\ChatItemText.js":"77","C:\\chatterona\\src\\components\\Chat\\ChatItemLink.js":"78","C:\\chatterona\\src\\http\\http-configuration.js":"79","C:\\chatterona\\src\\components\\Stepper.js":"80","C:\\chatterona\\src\\components\\EmojiPicker\\EmojiPicker.js":"81","C:\\chatterona\\src\\components\\AddServerDialog\\pages\\PageThree.js":"82","C:\\chatterona\\src\\components\\AddServerDialog\\pages\\PageTwo.js":"83","C:\\chatterona\\src\\components\\AddServerDialog\\pages\\PageOne.js":"84","C:\\chatterona\\src\\components\\AddServerDialog\\DialogItem.js":"85","C:\\chatterona\\src\\components\\EmojiPicker\\emojis.js":"86"},{"size":997,"mtime":1612523355176,"results":"87","hashOfConfig":"88"},{"size":391,"mtime":1612820896974,"results":"89","hashOfConfig":"88"},{"size":375,"mtime":1612523355182,"results":"90","hashOfConfig":"88"},{"size":3340,"mtime":1612820925424,"results":"91","hashOfConfig":"88"},{"size":896,"mtime":1612523355182,"results":"92","hashOfConfig":"88"},{"size":962,"mtime":1612523355172,"results":"93","hashOfConfig":"88"},{"size":115,"mtime":1612523355179,"results":"94","hashOfConfig":"88"},{"size":359,"mtime":1612754492339,"results":"95","hashOfConfig":"88"},{"size":1268,"mtime":1612953473799,"results":"96","hashOfConfig":"88"},{"size":765,"mtime":1612523355178,"results":"97","hashOfConfig":"88"},{"size":643,"mtime":1612523355181,"results":"98","hashOfConfig":"88"},{"size":618,"mtime":1612754492338,"results":"99","hashOfConfig":"88"},{"size":2045,"mtime":1612981964206,"results":"100","hashOfConfig":"88"},{"size":2313,"mtime":1612850856752,"results":"101","hashOfConfig":"88"},{"size":1462,"mtime":1612844643313,"results":"102","hashOfConfig":"88"},{"size":236,"mtime":1612754492337,"results":"103","hashOfConfig":"88"},{"size":111,"mtime":1612523355179,"results":"104","hashOfConfig":"88"},{"size":2537,"mtime":1612754492333,"results":"105","hashOfConfig":"88"},{"size":3540,"mtime":1612950542099,"results":"106","hashOfConfig":"88"},{"size":10615,"mtime":1612954871318,"results":"107","hashOfConfig":"88"},{"size":192,"mtime":1612754492341,"results":"108","hashOfConfig":"88"},{"size":6463,"mtime":1612975228070,"results":"109","hashOfConfig":"88"},{"size":1620,"mtime":1612821349269,"results":"110","hashOfConfig":"88"},{"size":697,"mtime":1612523355171,"results":"111","hashOfConfig":"88"},{"size":1379,"mtime":1612523355166,"results":"112","hashOfConfig":"88"},{"size":750,"mtime":1612914285097,"results":"113","hashOfConfig":"88"},{"size":1029,"mtime":1612754492340,"results":"114","hashOfConfig":"88"},{"size":1129,"mtime":1612754492341,"results":"115","hashOfConfig":"88"},{"size":527,"mtime":1612579384947,"results":"116","hashOfConfig":"88"},{"size":3765,"mtime":1612523355169,"results":"117","hashOfConfig":"88"},{"size":1121,"mtime":1612820830704,"results":"118","hashOfConfig":"88"},{"size":2233,"mtime":1612754492328,"results":"119","hashOfConfig":"88"},{"size":1913,"mtime":1612523355170,"results":"120","hashOfConfig":"88"},{"size":502,"mtime":1612523355174,"results":"121","hashOfConfig":"88"},{"size":4392,"mtime":1612825836851,"results":"122","hashOfConfig":"88"},{"size":1855,"mtime":1612523355168,"results":"123","hashOfConfig":"88"},{"size":1003,"mtime":1612523355167,"results":"124","hashOfConfig":"88"},{"size":1386,"mtime":1612523355166,"results":"125","hashOfConfig":"88"},{"size":5171,"mtime":1612973615572,"results":"126","hashOfConfig":"88"},{"size":438,"mtime":1612820302932,"results":"127","hashOfConfig":"88"},{"size":3573,"mtime":1612975726506,"results":"128","hashOfConfig":"88"},{"size":119,"mtime":1612819754834,"results":"129","hashOfConfig":"88"},{"size":997,"mtime":1613056604805,"results":"130","hashOfConfig":"131"},{"size":375,"mtime":1613056604809,"results":"132","hashOfConfig":"131"},{"size":391,"mtime":1613056604790,"results":"133","hashOfConfig":"131"},{"size":3340,"mtime":1613056604813,"results":"134","hashOfConfig":"131"},{"size":896,"mtime":1613056604809,"results":"135","hashOfConfig":"131"},{"size":962,"mtime":1613056604800,"results":"136","hashOfConfig":"131"},{"size":115,"mtime":1613056604807,"results":"137","hashOfConfig":"131"},{"size":359,"mtime":1613056604808,"results":"138","hashOfConfig":"131"},{"size":643,"mtime":1613056604808,"results":"139","hashOfConfig":"131"},{"size":1268,"mtime":1613057143135,"results":"140","hashOfConfig":"131"},{"size":618,"mtime":1613056604808,"results":"141","hashOfConfig":"131"},{"size":765,"mtime":1613056604806,"results":"142","hashOfConfig":"131"},{"size":2193,"mtime":1613057392760,"results":"143","hashOfConfig":"131"},{"size":2045,"mtime":1613057143132,"results":"144","hashOfConfig":"131"},{"size":2537,"mtime":1613056604800,"results":"145","hashOfConfig":"131"},{"size":236,"mtime":1613056604807,"results":"146","hashOfConfig":"131"},{"size":111,"mtime":1613056604807,"results":"147","hashOfConfig":"131"},{"size":1462,"mtime":1613057143128,"results":"148","hashOfConfig":"131"},{"size":1971,"mtime":1613057143126,"results":"149","hashOfConfig":"131"},{"size":2844,"mtime":1613057566198,"results":"150","hashOfConfig":"131"},{"size":6076,"mtime":1613057426389,"results":"151","hashOfConfig":"131"},{"size":8567,"mtime":1613057439755,"results":"152","hashOfConfig":"131"},{"size":697,"mtime":1613056604799,"results":"153","hashOfConfig":"131"},{"size":2233,"mtime":1613056604793,"results":"154","hashOfConfig":"131"},{"size":3765,"mtime":1613056604795,"results":"155","hashOfConfig":"131"},{"size":1913,"mtime":1613056604795,"results":"156","hashOfConfig":"131"},{"size":1121,"mtime":1613056604793,"results":"157","hashOfConfig":"131"},{"size":5152,"mtime":1613057252263,"results":"158","hashOfConfig":"131"},{"size":1107,"mtime":1613057143129,"results":"159","hashOfConfig":"131"},{"size":1164,"mtime":1613057143131,"results":"160","hashOfConfig":"131"},{"size":793,"mtime":1613057143130,"results":"161","hashOfConfig":"131"},{"size":1620,"mtime":1613056604801,"results":"162","hashOfConfig":"131"},{"size":1379,"mtime":1613056604791,"results":"163","hashOfConfig":"131"},{"size":438,"mtime":1613056604797,"results":"164","hashOfConfig":"131"},{"size":119,"mtime":1613056604798,"results":"165","hashOfConfig":"131"},{"size":3573,"mtime":1613057143124,"results":"166","hashOfConfig":"131"},{"size":419,"mtime":1613057143129,"results":"167","hashOfConfig":"131"},{"size":502,"mtime":1613056604802,"results":"168","hashOfConfig":"131"},{"size":2867,"mtime":1613057143125,"results":"169","hashOfConfig":"131"},{"size":4392,"mtime":1613056604792,"results":"170","hashOfConfig":"131"},{"size":1855,"mtime":1613056604792,"results":"171","hashOfConfig":"131"},{"size":1003,"mtime":1613056604792,"results":"172","hashOfConfig":"131"},{"size":1386,"mtime":1613056604791,"results":"173","hashOfConfig":"131"},{"size":2048,"mtime":1613057143125,"results":"174","hashOfConfig":"131"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},"1kxkpga",{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"177"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"177"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"177"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"177"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"177"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},"16428ba",{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"306","messages":"307","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"267"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"267"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"267"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"267"},"C:\\Code\\projects\\chatterona\\src\\index.js",[],["356","357"],"C:\\Code\\projects\\chatterona\\src\\App.js",[],"C:\\Code\\projects\\chatterona\\src\\reportWebVitals.js",[],"C:\\Code\\projects\\chatterona\\src\\styles\\muiTheme.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\store.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Router.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\history.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\rootReducer.js",[],"C:\\Code\\projects\\chatterona\\src\\utilities.js",[],"C:\\Code\\projects\\chatterona\\src\\pages\\MobileLanding.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\authReducer.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\reducers\\appReducer.js",[],"C:\\Code\\projects\\chatterona\\src\\pages\\Main.js",[],"C:\\Code\\projects\\chatterona\\src\\pages\\Login.js",["358"],"import { faCommentDots } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport { logInUserRedux } from \"../redux/actions/authActions\";\r\nimport GoogleLogo from \"../images/google-logo.svg\";\r\nimport config from \"../config\";\r\nimport { userService } from \"../services\";\r\n\r\nconst Login = ({ logInUser, history }) => {\r\n\r\n  const handleInitSignIn = () => {\r\n   const environmentHandlers = {\r\n      development: async () => {\r\n        const user = await userService.signInGoogle();\r\n        logInUser(user)\r\n        history.push(\"/\");\r\n      },\r\n      production: async () => {\r\n        const user = await userService.signInGoogle();\r\n        logInUser(user)\r\n        history.push(\"/\");\r\n      },\r\n    };\r\n    const foundHandlers = environmentHandlers[process.env.NODE_ENV];\r\n    return foundHandlers ? foundHandlers() : null;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        paddingTop: \"25vh\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"middle\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <Typography\r\n        style={{ color: \"white\", transform: \"rotate(-8deg)\", fontSize: 50 }}\r\n      >\r\n        Chatterona\r\n        <FontAwesomeIcon\r\n          icon={faCommentDots}\r\n          style={{\r\n            transform: \"rotate(-8deg)\",\r\n            color: \"#3d1059\",\r\n            margin: \"1vh\",\r\n          }}\r\n        ></FontAwesomeIcon>\r\n      </Typography>\r\n      <Button\r\n        style={{\r\n          width: 300,\r\n          marginTop: \"10vh\",\r\n          backgroundColor: \"#3d1059\",\r\n          color: \"white\",\r\n          height: 48,\r\n          fontWeight: 600,\r\n        }}\r\n        onClick={handleInitSignIn}\r\n      >\r\n        <img\r\n          style={{ marginRight: 16, height: 24, width: 24 }}\r\n          src={GoogleLogo}\r\n          alt=\"React Logo\"\r\n        />\r\n        Log in\r\n      </Button>\r\n      <span style={{ position: \"absolute\", color: 'white', bottom: 4, right: 0, fontSize: 12 }}>\r\n        2/8/21 6:14PM\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  logInUser: dispatch(logInUserRedux),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Login);\r\n","C:\\Code\\projects\\chatterona\\src\\config.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\actions\\appActions.js",[],"C:\\Code\\projects\\chatterona\\src\\redux\\actions\\authActions.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Header.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Servers\\Servers.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Chat\\Chat.js",["359","360","361","362"],"import { faPlusCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Grid, Paper, TextField, Typography } from \"@material-ui/core\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\nimport db, { firestore } from \"../../firebase\";\r\nimport \"../../utilities\";\r\nimport {\r\n  checkContentType,\r\n  checkUrlsContent,\r\n  validateUrl,\r\n} from \"../../utilities\";\r\nimport clsx from \"clsx\";\r\nimport ChatItem from \"./ChatItem\";\r\nimport channelService from \"../../http/channels-http\";\r\nimport messageServices from \"../../http/messages-http\";\r\n\r\nconst styles = (theme) => ({\r\n  \"@global\": {\r\n    \"*::-webkit-scrollbar-thumb\": {\r\n      display: \"none\",\r\n    },\r\n    /* width */\r\n    \"::-webkit-scrollbar\": {\r\n      display: \"none\",\r\n    },\r\n\r\n    /* Track */\r\n    \"::-webkit-scrollbar-track\": {\r\n      display: \"none\",\r\n    },\r\n\r\n    /* Handle */\r\n    \"::-webkit-scrollbar-thumb\": {\r\n      display: \"none\",\r\n    },\r\n\r\n    /* Handle on hover */\r\n    \"::-webkit-scrollbar-thumb:hover\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n\r\n  input2: {\r\n    height: 16,\r\n    fontSize: \"1rem\",\r\n    borderRadius: 8,\r\n    borderWidth: 0,\r\n    outline: 0,\r\n    \"&::placeholder\": {\r\n      color: \"#fff\",\r\n    },\r\n    \"&:focus\": {\r\n      outline: 0,\r\n    },\r\n    color: \"#dcddde\",\r\n  },\r\n  cssOutlinedInput: {\r\n    \"&$cssFocused $notchedOutline\": {\r\n      borderColor: `${theme.palette.primary.main} !important`,\r\n    },\r\n  },\r\n\r\n  cssFocused: {},\r\n\r\n  notchedOutline: {\r\n    borderWidth: \"1px\",\r\n    borderColor: \"#40444b !important\",\r\n  },\r\n  input: {\r\n    backgroundColor: \"#40444b\",\r\n    width: \"calc(100% - 30px)\",\r\n    position: \"absolute\",\r\n    bottom: 0,\r\n    borderRadius: 8,\r\n    color: \"#dcddde\",\r\n  },\r\n  userTypings: {\r\n    width: 400,\r\n    position: \"absolute\",\r\n    bottom: 60,\r\n    borderRadius: 8,\r\n    color: \"white\",\r\n  },\r\n  btn: {\r\n    cursor: \"pointer\",\r\n    border: \"none\",\r\n    backgroundColor: \"transparent\",\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n      border: \"none\",\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  icon: {\r\n    color: \"#dcddde\",\r\n    fontWeight: 400,\r\n    fontSize: 24,\r\n    marginRight: 16,\r\n  },\r\n  link: {\r\n    color: \"#2196f3\",\r\n  },\r\n});\r\n\r\nclass Chat extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.messageRef = React.createRef();\r\n  }\r\n  state = {\r\n    messages: [],\r\n    usersTyping: {},\r\n    messageType: \"text\",\r\n    message: \"\",\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const { selectedChannel, selectedServer } = this.props;\r\n    if (selectedChannel.id && selectedServer.id) {\r\n      this.registerEventListeners(selectedServer.id, selectedChannel.id);\r\n    }\r\n  };\r\n\r\n  updateChannel = (data) => {\r\n    /// when channel gets updated.. typing and others\r\n  };\r\n\r\n  componentDidUpdate = (prevProps, prevState) => {\r\n    const { selectedChannel, selectedServer } = this.props;\r\n    if (prevProps.selectedChannel.id !== selectedChannel.id) {\r\n      this.registerEventListeners(selectedServer.id, selectedChannel.id);\r\n    }\r\n  };\r\n\r\n  registerEventListeners = (serverId, channelId) => {\r\n    channelService.registerChannelListener(\r\n      serverId,\r\n      channelId,\r\n      this.updateChannel\r\n    );\r\n    messageServices.registerMessagesListener(\r\n      serverId,\r\n      channelId,\r\n      this.handleMessageEvents\r\n    );\r\n  };\r\n\r\n  handleMessageEvents = (messages) => {\r\n    this.setState({ messages });\r\n    if (this.messageRef && this.messageRef.current) {\r\n      this.messageRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  };\r\n\r\n  addMessageToChannel = async () => {\r\n    const { message } = this.state;\r\n    this.setState({ userTyping: false, message: \"\" });\r\n    const { selectedChannel, selectedServer } = this.props;\r\n    await messageServices.createMessage(\r\n      selectedServer.id,\r\n      selectedChannel.id,\r\n      message\r\n    );\r\n  };\r\n\r\n  handleTyping = (e) => {\r\n    this.setState({ userTyping: true });\r\n    // const { selectedChannel, user } = this.props;\r\n    // channelService.addUserTyping(selectedChannel.id, user, true);\r\n    this.setState({\r\n      messageType: validateUrl(e.target.value),\r\n      message: e.target.value,\r\n    });\r\n  };\r\n\r\n  submitMessage = ({ key }) =>\r\n    key === \"Enter\" ? this.addMessageToChannel() : null;\r\n\r\n  isNewDay = (currentDate, previousDate) => {\r\n    return !moment(currentDate).isSame(previousDate, \"day\");\r\n  };\r\n\r\n  getUserTypings = () => {\r\n    const { usersTyping } = this.state;\r\n    const { user } = this.props;\r\n    let headline = \"\";\r\n    const typers = Object.keys(usersTyping).reduce((acc, key) => {\r\n      if (usersTyping[key].typing && usersTyping[key].name !== user.displayName)\r\n        acc = [...acc, usersTyping[key].name];\r\n      return acc;\r\n    }, []);\r\n    if (typers.length > 2) headline = \"Holy cow! Too many people to count!\";\r\n    else {\r\n      const join = typers.length === 1 ? \" is\" : \" are\";\r\n      headline = typers.length ? typers.join(\", \") + `${join} typing...` : \"\";\r\n    }\r\n    return (\r\n      <span\r\n        id=\"user-typing\"\r\n        style={{ fontSize: 11, fontWeight: 600, marginLeft: 8 }}\r\n      >\r\n        {headline}\r\n      </span>\r\n    );\r\n  };\r\n  fileHandler = (e) => {\r\n    //??\r\n    // const { message } = this.state;\r\n    // this.setState({ message: { ...message, type: \"img\" } });\r\n  };\r\n\r\n  upload = () => {\r\n    // document.getElementById(\"upload-message-img\").click();\r\n  };\r\n\r\n  render() {\r\n    const { messages, message, messageType } = this.state;\r\n    const { classes, selectedChannel } = this.props;\r\n    return (\r\n      <div\r\n        style={{\r\n          position: \"relative\",\r\n          padding: 8,\r\n          left: 310,\r\n          width: \"calc(100% - 515px)\",\r\n          height: \"calc(100vh - 48px)\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            position: \"relative\",\r\n            top: 40,\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              maxHeight: \"calc(100vh - 160px)\",\r\n              padding: 0,\r\n              overflow: \"auto\",\r\n            }}\r\n          >\r\n            {messages && messages.length ? (\r\n              messages.map((msg, i) => (\r\n                <div>\r\n                  <Grid item xs={12}>\r\n                    {this.isNewDay(\r\n                      msg.date,\r\n                      messages[i - 1] ? messages[i - 1].date : msg.date\r\n                    ) ? (\r\n                      <Paper\r\n                        elevation={0}\r\n                        square\r\n                        style={{\r\n                          height: 20,\r\n                          textAlign: \"center\",\r\n                          backgroundColor: \"transparent\",\r\n                          width: \"calc(100% - 30px\",\r\n                          borderBottom: \"1px solid grey\",\r\n                          padding: 8,\r\n                        }}\r\n                      >\r\n                        <Typography\r\n                          style={{\r\n                            color: \"grey\",\r\n                            fontSize: 12,\r\n                            fontWeight: 600,\r\n                          }}\r\n                        >\r\n                          {moment(msg.date).format(\"MMMM DD, YYYY\")}\r\n                        </Typography>\r\n                      </Paper>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </Grid>\r\n                  <ChatItem\r\n                    message={msg}\r\n                    messageRef={\r\n                      i === messages.length - 1 ? this.messageRef : null\r\n                    }\r\n                  />\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <Paper\r\n                style={{\r\n                  minHeight: 40,\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  margin: 12,\r\n                  padding: 14,\r\n                  backgroundColor: \"#3a4146\",\r\n                  width: \"80%\",\r\n                }}\r\n              >\r\n                <Paper\r\n                  style={{\r\n                    backgroundImage: `url(https://images.unsplash.com/photo-1503797558227-76451ba6de08?ixid=MXwxMjA3fDB8MHxzZWFyY2h8MzN8fGdvYXR8ZW58MHx8MHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=500&q=60)`,\r\n                    borderRadius: 20,\r\n                    backgroundSize: \"contain\",\r\n                    height: 40,\r\n                    width: 40,\r\n                  }}\r\n                ></Paper>\r\n                <Typography\r\n                  style={{\r\n                    fontSize: 14,\r\n                    marginLeft: 14,\r\n                    marginTop: 8,\r\n                    color: \"white\",\r\n                    fontWeight: 600,\r\n                  }}\r\n                >\r\n                  No messages in this channel! Send one to start a conversation.\r\n                </Typography>\r\n              </Paper>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          <Typography className={classes.userTypings}>\r\n            {this.getUserTypings()}\r\n          </Typography>\r\n        </div>\r\n\r\n        <TextField\r\n          InputProps={{\r\n            classes: {\r\n              root: classes.cssOutlinedInput,\r\n              input:\r\n                messageType === \"link\"\r\n                  ? clsx([classes.input2, classes.link])\r\n                  : classes.input2,\r\n              focused: classes.cssFocused,\r\n              notchedOutline: classes.notchedOutline,\r\n            },\r\n            startAdornment: (\r\n              <div style={{ display: \"grid\" }}>\r\n                <button className={classes.btn} id=\"plus\" onClick={this.upload}>\r\n                  <FontAwesomeIcon\r\n                    className={classes.icon}\r\n                    icon={faPlusCircle}\r\n                  ></FontAwesomeIcon>\r\n                </button>\r\n                <input\r\n                  id=\"upload-message-img\"\r\n                  hidden\r\n                  type=\"file\"\r\n                  onChange={this.fileHandler}\r\n                />\r\n              </div>\r\n            ),\r\n          }}\r\n          style={{ fontSize: \"24px\" }}\r\n          variant=\"outlined\"\r\n          placeholder={`Message #${\r\n            selectedChannel ? selectedChannel.name : \"\"\r\n          }`}\r\n          autoFocus\r\n          onKeyPress={this.submitMessage}\r\n          onChange={this.handleTyping}\r\n          value={message}\r\n          className={classes.input}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Chat);\r\n","C:\\Code\\projects\\chatterona\\src\\services\\index.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Channels\\Channels.js",["363"],"import {\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  List,\r\n  Paper,\r\n  Collapse,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport channelService from \"../../http/channels-http\";\r\nimport ChannelHeader from \"./ChannelHeader\";\r\nimport ChannelListItem from \"./ChannelListItem\";\r\nimport CreateChannelDialog from \"./CreateChannelDialog\";\r\nimport Drawer from \"../Drawer\";\r\nimport HeaderOptions from \"./HeaderOptions\";\r\nimport {\r\n  faChevronDown,\r\n  faChevronRight,\r\n  faHashtag,\r\n  faPlus,\r\n  faVolumeUp,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport db from \"../../firebase\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  drawer: { backgroundColor: \"#2f3136\", width: \"310px\" },\r\n  wrapper: { paddingLeft: \"72px\" },\r\n  divider: { width: \"100%\", height: 1, backgroundColor: \"#1e1e1e\" },\r\n  list: { width: \"100%\", margin: 4 },\r\n  paper: {\r\n    position: \"absolute\",\r\n    backgroundColor: \"#292b2f\",\r\n    bottom: 0,\r\n    padding: 8,\r\n    height: 52,\r\n    width: \"calc(100% - 72px)\",\r\n  },\r\n  bottomPaper: {\r\n    position: \"relative\",\r\n    minHeight: 40,\r\n    borderRadius: 20,\r\n    backgroundSize: \"contain\",\r\n    margin: 6,\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    cursor: \"pointer\",\r\n    height: 40,\r\n    width: 40,\r\n  },\r\n  bottomSpacer: {\r\n    height: 12,\r\n    width: 12,\r\n    position: \"absolute\",\r\n    bottom: 0,\r\n    left: 24,\r\n    border: \"1px solid black\",\r\n    backgroundColor: \"#20b673\",\r\n    borderRadius: 6,\r\n  },\r\n  userText: {\r\n    position: \"absolute\",\r\n    top: 14,\r\n    left: 50,\r\n    fontSize: 12,\r\n    color: \"white\",\r\n    fontWeight: 700,\r\n  },\r\n  nameSpan: {\r\n    whiteSpace: \"nowrap\",\r\n  },\r\n}));\r\n\r\nconst Channels = ({\r\n  selectedServer = {},\r\n  selectedChannel = {},\r\n  setChannel,\r\n  user,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [channels, setChannels] = useState([]);\r\n  const [headerOptions, showHeaderOptions] = useState(false);\r\n  const [openDropdowns, setDropdownsOpen] = useState({\r\n    text: false,\r\n    voice: false,\r\n  });\r\n  const [showChannelDialog, setChannelDialogOpen] = useState(false);\r\n\r\n  const handleChannelEvents = (channels) => {\r\n    if (channels) {\r\n      setChannels(channels);\r\n    \r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const { id } = selectedServer;\r\n    if (id) {\r\n      channelService.registerChannelsListener(id, handleChannelEvents);\r\n    }\r\n  }, [selectedServer.id]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const toggleDropdown = (type) => {\r\n    setDropdownsOpen({\r\n      ...openDropdowns,\r\n      [type]: !openDropdowns[type],\r\n    });\r\n  };\r\n\r\n  const handleAddChannel = async (channel) => {\r\n    await channelService.createChannel(selectedServer.id, channel);\r\n    setChannelDialogOpen({ open: false });\r\n  };\r\n\r\n  const toggleHeaderOptions = () => showHeaderOptions(!headerOptions);\r\n\r\n  return (\r\n    <Drawer className={classes.drawer} anchor=\"left\">\r\n      <div className={classes.wrapper}>\r\n        <ChannelHeader\r\n          serverName={selectedServer.name}\r\n          toggleHeaderOptions={toggleHeaderOptions}\r\n        />\r\n        <Divider className={classes.divider} />\r\n        <Grid container>\r\n          <List className={classes.list}>\r\n            <ChannelListItem\r\n              header\r\n              iconLeft={openDropdowns[\"text\"] ? faChevronDown : faChevronRight}\r\n              iconRight={{\r\n                icon: faPlus,\r\n                title: \"Create Channel\",\r\n                onClick: () =>\r\n                  setChannelDialogOpen({ type: \"text\", open: true }),\r\n              }}\r\n              title=\"TEXT CHANNELS\"\r\n              titleStyle={{ fontSize: 12 }}\r\n              onClick={() => toggleDropdown(\"text\")}\r\n            />\r\n            <Collapse in={openDropdowns[\"text\"]} timeout={200}>\r\n              {channels\r\n                ? channels\r\n                    .filter((chnl) => chnl.type === \"text\")\r\n                    .map((chnl) => (\r\n                      <ChannelListItem\r\n                        selected={chnl.id === selectedChannel.id}\r\n                        iconLeft={\r\n                          chnl.type === \"voice\" ? faVolumeUp : faHashtag\r\n                        }\r\n                        onClick={() => setChannel(chnl)}\r\n                        title={chnl.name}\r\n                      />\r\n                    ))\r\n                : \"\"}\r\n            </Collapse>\r\n            <ChannelListItem\r\n              header\r\n              iconLeft={openDropdowns[\"voice\"] ? faChevronDown : faChevronRight}\r\n              iconRight={{\r\n                icon: faPlus,\r\n                title: \"Create Channel\",\r\n                onClick: () =>\r\n                  setChannelDialogOpen({ type: \"voice\", open: true }),\r\n              }}\r\n              title=\"VOICE CHANNELS\"\r\n              titleStyle={{ fontSize: 12 }}\r\n              onClick={() => toggleDropdown(\"voice\")}\r\n            />\r\n            <Collapse in={openDropdowns[\"voice\"]} timeout={200}>\r\n              {channels\r\n                ? channels\r\n                    .filter((chnl) => chnl.type === \"voice\")\r\n                    .map((chnl) => (\r\n                      <ChannelListItem\r\n                        selected={chnl.id === selectedChannel.id}\r\n                        iconLeft={\r\n                          chnl.type === \"voice\" ? faVolumeUp : faHashtag\r\n                        }\r\n                        onClick={() => setChannel(chnl)}\r\n                        title={chnl.name}\r\n                      />\r\n                    ))\r\n                : \"\"}\r\n            </Collapse>\r\n          </List>\r\n        </Grid>\r\n        <Paper className={classes.paper}>\r\n          <Paper\r\n            style={{ backgroundImage: `url(${user.photoURL})` }}\r\n            className={classes.bottomPaper}\r\n          >\r\n            <div className={classes.bottomSpacer}></div>\r\n            <Typography variant=\"body1\" className={classes.userText}>\r\n              <span className={classes.nameSpan}>{user.displayName}</span>\r\n            </Typography>\r\n          </Paper>\r\n        </Paper>\r\n      </div>\r\n      <HeaderOptions\r\n        handleAddChannel={handleAddChannel}\r\n        headerOptions={headerOptions}\r\n      />\r\n      <CreateChannelDialog\r\n        showChannelDialog={showChannelDialog}\r\n        handleAddChannel={handleAddChannel}\r\n        setChannelDialogOpen={setChannelDialogOpen}\r\n      />\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default Channels;\r\n","C:\\Code\\projects\\chatterona\\src\\components\\Servers\\ServerListItem.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Drawer.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\AddServerDialog.js",[],"C:\\Code\\projects\\chatterona\\src\\firebase.js",[],"C:\\Code\\projects\\chatterona\\src\\services\\channel-service.js",[],"C:\\Code\\projects\\chatterona\\src\\services\\server-service.js",[],"C:\\Code\\projects\\chatterona\\src\\services\\user-service.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Channels\\CreateChannelDialog.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Channels\\ChannelHeader.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Channels\\ChannelListItem.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Channels\\HeaderOptions.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Stepper.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageThree.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageTwo.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\pages\\PageOne.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\AddServerDialog\\DialogItem.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItem.js",["364","365"],"import {\r\n  faEllipsisH,\r\n  faLaughBeam,\r\n  faPencilAlt,\r\n  faSmile,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Paper, Tooltip, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport React, { useState } from \"react\";\r\nimport EmojiPicker from \"../EmojiPicker/EmojiPicker\";\r\nimport ChatItemImage from \"./ChatItemImage\";\r\nimport ChatItemLink from \"./ChatItemLink\";\r\nimport ChatItemText from \"./ChatItemText\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  chatItem: {\r\n    backgroundColor: \"transparent\",\r\n    color: \"#eee\",\r\n    position: \"relative\",\r\n  },\r\n  hoverItem: {\r\n    padding: 2,\r\n    \"&:hover\": {\r\n      backgroundColor: \"rgb(47,49,54, .4)\",\r\n    },\r\n  },\r\n  actionBadge: {\r\n    backgroundColor: \"#2f3136\",\r\n    borderRadius: 8,\r\n    position: \"absolute\",\r\n    top: -35,\r\n    right: -15,\r\n    width: 100,\r\n    height: 30,\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    padding: 8,\r\n  },\r\n  emojiIcon: {\r\n    fontSize: 20,\r\n    cursor: \"pointer\",\r\n    color: \"white\",\r\n  },\r\n}));\r\nconst ChatItem = ({ messageRef, message }) => {\r\n  const classes = useStyles();\r\n  const components = {\r\n    image: ChatItemImage,\r\n    link: ChatItemLink,\r\n    text: ChatItemText,\r\n  };\r\n\r\n  const determineMessageType = (content) => {\r\n    const isImage = content.type ? content.type.includes(\"image\") : false;\r\n    const isText = content.type === \"text\";\r\n    const isExternalLink = content.type.includes(\"text/html\");\r\n    const component = [\r\n      { name: \"image\", active: isImage },\r\n      { name: \"text\", active: isText },\r\n      { name: \"link\", active: isExternalLink },\r\n    ].find((n) => n.active);\r\n\r\n    const Component = component\r\n      ? components[component.name]\r\n      : components[\"text\"];\r\n\r\n    return <Component content={content} />;\r\n  };\r\n  const [showMsgActions, displayMessageActions] = useState(false);\r\n  const [emojiPickerOpen, showEmojiPicker] = useState(false);\r\n\r\n  const showActions = (i) => {\r\n    displayMessageActions({ [i]: !showMsgActions[i] });\r\n  };\r\n\r\n  const toggleEmojiPicker = (i) => {\r\n    showEmojiPicker({ [i]: !emojiPickerOpen[i] });\r\n  };\r\n  return (\r\n    <div>\r\n      <Paper\r\n        elevation={0}\r\n        ref={messageRef}\r\n        style={{\r\n          minHeight: 40,\r\n          display: \"flex\",\r\n          justifyContent: \"flex-start\",\r\n          flexDirection: \"row\",\r\n          padding: 14,\r\n          backgroundColor: \"transparent\",\r\n          overflowY: \"auto\",\r\n          width: \"90%\",\r\n          position: \"relative\",\r\n        }}\r\n      >\r\n        <Paper\r\n          style={{\r\n            backgroundImage: `url(${\r\n              message.author ? message.author.photoURL : \"\"\r\n            })`,\r\n            borderRadius: 20,\r\n            backgroundSize: \"contain\",\r\n            height: 40,\r\n            width: 40,\r\n          }}\r\n        ></Paper>\r\n        <Typography\r\n          style={{\r\n            fontSize: 14,\r\n            marginLeft: 22,\r\n            width: \"100%\",\r\n            color: \"white\",\r\n            fontWeight: 600,\r\n          }}\r\n        >\r\n          <Typography\r\n            style={{\r\n              fontSize: \"1rem\",\r\n              color: \"white\",\r\n              fontWeight: 500,\r\n              lineHeight: \"1.375rem\",\r\n            }}\r\n          >\r\n            {\" \"}\r\n            {message.author.name}\r\n            <span\r\n              style={{\r\n                fontSize: 10,\r\n\r\n                color: \"grey\",\r\n                fontWeight: 500,\r\n                marginLeft: 16,\r\n              }}\r\n            >\r\n              {message.date}\r\n            </span>\r\n          </Typography>\r\n          <div style={{ width: \"100%\" }}>\r\n            {message.content.map((content, i) => (\r\n              <Paper\r\n                onMouseEnter={() => showActions(i)}\r\n                onMouseLeave={() => showActions(i)}\r\n                elevation={0}\r\n                className={classes.chatItem}\r\n              >\r\n                <div className={classes.hoverItem}>\r\n                  {showMsgActions[i] && (\r\n                    <div className={classes.actionBadge}>\r\n                      <FontAwesomeIcon\r\n                        onClick={() => toggleEmojiPicker(i)}\r\n                        className={classes.emojiIcon}\r\n                        icon={faLaughBeam}\r\n                      />\r\n                      <FontAwesomeIcon\r\n                        className={classes.emojiIcon}\r\n                        icon={faPencilAlt}\r\n                      />\r\n                      <FontAwesomeIcon\r\n                        className={classes.emojiIcon}\r\n                        icon={faEllipsisH}\r\n                      />\r\n                    </div>\r\n                  )}\r\n                  {determineMessageType(content)}\r\n                </div>\r\n                <EmojiPicker\r\n                  open={emojiPickerOpen[i]}\r\n                  toggleEmojiPicker={toggleEmojiPicker}\r\n                />\r\n              </Paper>\r\n            ))}\r\n          </div>\r\n        </Typography>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatItem;\r\n","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemImage.js",[],"C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemLink.js",["366","367"],"import { Dialog, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { useState } from \"react\";\r\nimport { truncateString } from \"../../utilities\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"relative\",\r\n    textAlign: \"center\",\r\n    width: 400,\r\n    height: 200,\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\nfooterButton: {\r\n  color: \"#fff\",\r\n  backgroundColor: theme.palette.secondary.main,\r\n  \"&:hover\": {\r\n    backgroundColor: \"#4f4f4f\",\r\n  },\r\n},\r\n  link: {\r\n    padding: 12,\r\n    textDecoration: \"none\",\r\n    flexWrap: \"nowrap\",\r\n    width: 400,\r\n    color: \"white\",\r\n    backgroundColor: \"#2f3136\",\r\n    cursor: \"pointer\",\r\n  },\r\n  linkBody: {\r\n    display: \"flex\",\r\n    height: 40,\r\n    width: \"100%\",\r\n    flexWrap: \"nowrap\",\r\n  },\r\n  linkBody2: {},\r\n}));\r\nconst ChatItemLink = ({ content }) => {\r\n  const classes = useStyles();\r\n  const [showNavDialog, setNavDialog] = useState(false);\r\n  const toggleDialog = () => {\r\n    setNavDialog(!showNavDialog);\r\n  };\r\n\r\n  const displayContent = (key) => {\r\n    return content[key] && content[key] !== \"Unknown\"\r\n      ? truncateString(content[key], 100)\r\n      : \"\";\r\n  };\r\n  const navigateToNewPage = () => {\r\n    const newWindow = window.open(content.message, '_blank');\r\n    newWindow.focus();\r\n  }\r\n\r\n  const LinkDialog = () => {\r\n    return (\r\n      <Dialog\r\n        PaperProps={{\r\n          className: classes.paper,\r\n        }}\r\n        open={showNavDialog}\r\n        onClose={toggleDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle style={{ color: 'white'}} id=\"alert-dialog-title\">\r\n          Do you trust this link?\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText style={{ color: 'white'}} id=\"alert-dialog-description\">\r\n            Clicking this link will navigate you to a new tab.\r\n          </DialogContentText>\r\n        </DialogContent>\r\n\r\n        <DialogActions>\r\n\r\n        <Button\r\n          onClick={navigateToNewPage}\r\n          className={classes.footerButton}\r\n        >\r\n          Proceed\r\n        </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  };\r\n  return (\r\n    <Paper elevation={2} onClick={toggleDialog} className={classes.link}>\r\n      <div className={classes.linkBody}>\r\n        {content.icon && (\r\n          <img\r\n            src={content.icon}\r\n            style={{ height: 40, marginRight: 8, width: 40 }}\r\n          />\r\n        )}\r\n        <Typography style={{ width: \"100%\", marginTop: 8, fontWeight: 600 }}>\r\n          {\" \"}\r\n          {displayContent(\"site\")}\r\n        </Typography>\r\n      </div>\r\n      <div className={classes.linkBody2}>\r\n        {content.img && (\r\n          <img\r\n            src={content.img}\r\n            style={{ height: \"300px\", width: \"100%\", marginTop: 8 }}\r\n          />\r\n        )}\r\n        <Typography style={{ width: \"100%\", marginTop: 8, fontWeight: 600 }}>\r\n          {\" \"}\r\n          {displayContent(\"title1\")}\r\n        </Typography>\r\n\r\n        {/* <Typography style={{ width: \"100%\", marginTop: 8, fontWeight: 600 }}> {displayContent(\"description\")}</Typography> */}\r\n      </div>\r\n      <LinkDialog />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ChatItemLink;\r\n","C:\\Code\\projects\\chatterona\\src\\components\\Chat\\ChatItemText.js",[],"C:\\chatterona\\src\\index.js",[],["368","369"],"C:\\chatterona\\src\\reportWebVitals.js",[],"C:\\chatterona\\src\\App.js",[],"C:\\chatterona\\src\\styles\\muiTheme.js",[],"C:\\chatterona\\src\\redux\\store.js",[],"C:\\chatterona\\src\\components\\Router.js",[],"C:\\chatterona\\src\\redux\\history.js",[],"C:\\chatterona\\src\\redux\\reducers\\rootReducer.js",[],"C:\\chatterona\\src\\redux\\reducers\\authReducer.js",[],"C:\\chatterona\\src\\utilities.js",[],"C:\\chatterona\\src\\redux\\reducers\\appReducer.js",[],"C:\\chatterona\\src\\pages\\MobileLanding.js",[],"C:\\chatterona\\src\\pages\\Login.js",[],"C:\\chatterona\\src\\pages\\Main.js",[],"C:\\chatterona\\src\\components\\Header.js",[],"C:\\chatterona\\src\\redux\\actions\\appActions.js",[],"C:\\chatterona\\src\\redux\\actions\\authActions.js",[],"C:\\chatterona\\src\\config.js",[],"C:\\chatterona\\src\\components\\Servers\\ServerUsers.js",[],"C:\\chatterona\\src\\components\\Servers\\Servers.js",["370"],"C:\\chatterona\\src\\components\\Channels\\Channels.js",["371","372"],"import {\r\n  Typography,\r\n  Grid,\r\n  Divider,\r\n  List,\r\n  Paper,\r\n  Collapse,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ChannelHeader from \"./ChannelHeader\";\r\nimport ChannelListItem from \"./ChannelListItem\";\r\nimport CreateChannelDialog from \"./CreateChannelDialog\";\r\nimport Drawer from \"../Drawer\";\r\nimport HeaderOptions from \"./HeaderOptions\";\r\nimport {\r\n  faChevronDown,\r\n  faChevronRight,\r\n  faHashtag,\r\n  faPlus,\r\n  faVolumeUp,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  drawer: { backgroundColor: \"#2f3136\", width: \"310px\" },\r\n  wrapper: { paddingLeft: \"72px\" },\r\n  divider: { width: \"100%\", height: 1, backgroundColor: \"#1e1e1e\" },\r\n  list: { width: \"100%\", margin: 4 },\r\n  paper: {\r\n    position: \"absolute\",\r\n    backgroundColor: \"#292b2f\",\r\n    bottom: 0,\r\n    padding: 8,\r\n    height: 52,\r\n    width: \"calc(100% - 72px)\",\r\n  },\r\n  bottomPaper: {\r\n    position: \"relative\",\r\n    minHeight: 40,\r\n    borderRadius: 20,\r\n    backgroundSize: \"contain\",\r\n    margin: 6,\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n    cursor: \"pointer\",\r\n    height: 40,\r\n    width: 40,\r\n  },\r\n  bottomSpacer: {\r\n    height: 12,\r\n    width: 12,\r\n    position: \"absolute\",\r\n    bottom: 0,\r\n    left: 24,\r\n    border: \"1px solid black\",\r\n    backgroundColor: \"#20b673\",\r\n    borderRadius: 6,\r\n  },\r\n  userText: {\r\n    position: \"absolute\",\r\n    top: 14,\r\n    left: 50,\r\n    fontSize: 12,\r\n    color: \"white\",\r\n    fontWeight: 700,\r\n  },\r\n  nameSpan: {\r\n    whiteSpace: \"nowrap\",\r\n  },\r\n}));\r\n\r\nconst Channels = ({\r\n  selectedServer = {},\r\n  selectedChannel = {},\r\n  setChannel,\r\n  user,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [channels, setChannels] = useState([]);\r\n  const [headerOptions, showHeaderOptions] = useState(false);\r\n  const [openDropdowns, setDropdownsOpen] = useState({\r\n    text: false,\r\n    voice: false,\r\n  });\r\n  const [showChannelDialog, setChannelDialogOpen] = useState(false);\r\n\r\n  const handleChannelEvents = (channels) => {\r\n    if (channels) {\r\n      setChannels(channels);\r\n    \r\n    }\r\n  };\r\n\r\n\r\n \r\n\r\n  const toggleDropdown = (type) => {\r\n    setDropdownsOpen({\r\n      ...openDropdowns,\r\n      [type]: !openDropdowns[type],\r\n    });\r\n  };\r\n\r\n  const handleAddChannel = async (channel) => {\r\n    setChannelDialogOpen({ open: false });\r\n  };\r\n\r\n  const toggleHeaderOptions = () => showHeaderOptions(!headerOptions);\r\n\r\n  return (\r\n    <Drawer className={classes.drawer} anchor=\"left\">\r\n      <div className={classes.wrapper}>\r\n        <ChannelHeader\r\n          serverName={selectedServer.name}\r\n          toggleHeaderOptions={toggleHeaderOptions}\r\n        />\r\n        <Divider className={classes.divider} />\r\n        <Grid container>\r\n          <List className={classes.list}>\r\n            <ChannelListItem\r\n              header\r\n              iconLeft={openDropdowns[\"text\"] ? faChevronDown : faChevronRight}\r\n              iconRight={{\r\n                icon: faPlus,\r\n                title: \"Create Channel\",\r\n                onClick: () =>\r\n                  setChannelDialogOpen({ type: \"text\", open: true }),\r\n              }}\r\n              title=\"TEXT CHANNELS\"\r\n              titleStyle={{ fontSize: 12 }}\r\n              onClick={() => toggleDropdown(\"text\")}\r\n            />\r\n            <Collapse in={openDropdowns[\"text\"]} timeout={200}>\r\n              {channels\r\n                ? channels\r\n                    .filter((chnl) => chnl.type === \"text\")\r\n                    .map((chnl) => (\r\n                      <ChannelListItem\r\n                        selected={chnl.id === selectedChannel.id}\r\n                        iconLeft={\r\n                          chnl.type === \"voice\" ? faVolumeUp : faHashtag\r\n                        }\r\n                        onClick={() => setChannel(chnl)}\r\n                        title={chnl.name}\r\n                      />\r\n                    ))\r\n                : \"\"}\r\n            </Collapse>\r\n            <ChannelListItem\r\n              header\r\n              iconLeft={openDropdowns[\"voice\"] ? faChevronDown : faChevronRight}\r\n              iconRight={{\r\n                icon: faPlus,\r\n                title: \"Create Channel\",\r\n                onClick: () =>\r\n                  setChannelDialogOpen({ type: \"voice\", open: true }),\r\n              }}\r\n              title=\"VOICE CHANNELS\"\r\n              titleStyle={{ fontSize: 12 }}\r\n              onClick={() => toggleDropdown(\"voice\")}\r\n            />\r\n            <Collapse in={openDropdowns[\"voice\"]} timeout={200}>\r\n              {channels\r\n                ? channels\r\n                    .filter((chnl) => chnl.type === \"voice\")\r\n                    .map((chnl) => (\r\n                      <ChannelListItem\r\n                        selected={chnl.id === selectedChannel.id}\r\n                        iconLeft={\r\n                          chnl.type === \"voice\" ? faVolumeUp : faHashtag\r\n                        }\r\n                        onClick={() => setChannel(chnl)}\r\n                        title={chnl.name}\r\n                      />\r\n                    ))\r\n                : \"\"}\r\n            </Collapse>\r\n          </List>\r\n        </Grid>\r\n        <Paper className={classes.paper}>\r\n          <Paper\r\n            style={{ backgroundImage: `url(${user.photoURL})` }}\r\n            className={classes.bottomPaper}\r\n          >\r\n            <div className={classes.bottomSpacer}></div>\r\n            <Typography variant=\"body1\" className={classes.userText}>\r\n              <span className={classes.nameSpan}>{user.displayName}</span>\r\n            </Typography>\r\n          </Paper>\r\n        </Paper>\r\n      </div>\r\n      <HeaderOptions\r\n        handleAddChannel={handleAddChannel}\r\n        headerOptions={headerOptions}\r\n      />\r\n      <CreateChannelDialog\r\n        showChannelDialog={showChannelDialog}\r\n        handleAddChannel={handleAddChannel}\r\n        setChannelDialogOpen={setChannelDialogOpen}\r\n      />\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default Channels;\r\n","C:\\chatterona\\src\\components\\Chat\\Chat.js",[],"C:\\chatterona\\src\\components\\Drawer.js",[],"C:\\chatterona\\src\\components\\Channels\\ChannelListItem.js",[],"C:\\chatterona\\src\\components\\Channels\\CreateChannelDialog.js",[],"C:\\chatterona\\src\\components\\Channels\\HeaderOptions.js",[],"C:\\chatterona\\src\\components\\Channels\\ChannelHeader.js",[],"C:\\chatterona\\src\\components\\Chat\\ChatItem.js",[],"C:\\chatterona\\src\\http\\channels-http.js",[],"C:\\chatterona\\src\\http\\servers-http.js",[],"C:\\chatterona\\src\\http\\messages-http.js",[],"C:\\chatterona\\src\\components\\Servers\\ServerListItem.js",[],"C:\\chatterona\\src\\components\\AddServerDialog\\AddServerDialog.js",[],"C:\\chatterona\\src\\components\\Chat\\ChatItemImage.js",[],"C:\\chatterona\\src\\components\\Chat\\ChatItemText.js",[],"C:\\chatterona\\src\\components\\Chat\\ChatItemLink.js",["373","374"],"C:\\chatterona\\src\\http\\http-configuration.js",[],"C:\\chatterona\\src\\components\\Stepper.js",[],"C:\\chatterona\\src\\components\\EmojiPicker\\EmojiPicker.js",["375","376","377","378"],"import React, { Component, useState } from \"react\";\r\nimport { Dialog, Paper, TextField, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport emojione from \"emojione\";\r\nimport { peopleEmojis } from \"./emojis\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    height: 400,\r\n    width: 400,\r\n    position: \"fixed\",\r\n    right: 420,\r\n    bottom: 29,\r\n    zIndex: 1600,\r\n    backgroundColor: \"#2f3136\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    flexWrap: \"wrap\",\r\n    overflow: \"auto\",\r\n  },\r\n  header: {\r\n    position: \"sticky\",\r\n    backgroundColor: \"#2f3136\",\r\n    top: 0,\r\n    padding: 10,\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n\r\n    width: \"100%\",\r\n  },\r\n  dialog: {\r\n    position: \"absolute\",\r\n    right: 20,\r\n  },\r\n  backdrop: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    backgroundColor: 'transparent',\r\n  },\r\n  emoji: {\r\n    fontSize: 30,\r\n    cursor: \"pointer\",\r\n  },\r\n  input: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n    height: 34,\r\n    color: \"white\",\r\n  },\r\n}));\r\nconst EmojiPicker = ({ open, toggleEmojiPicker }) => {\r\n  const classes = useStyles();\r\n\r\n  const [chosenEmoji, setChosenEmoji] = useState(null);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n\r\n  const onEmojiClick = (e, emojiObject) => {\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    setSearchText(e.target.value);\r\n  };\r\n  return open ? (\r\n    <Backdrop className={classes.backdrop} open={open} onClick={toggleEmojiPicker}>\r\n    <Paper className={classes.paper}>\r\n      <Paper className={classes.header}>\r\n        <TextField\r\n          autoFocus={true}\r\n          onChange={handleSearch}\r\n          value={searchText}\r\n          style={{ width: \"85%\" }}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <FontAwesomeIcon\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => setSearchText(\"\")}\r\n                icon={searchText.length ? faTimes : faSearch}\r\n              />\r\n            ),\r\n            className: classes.input,\r\n          }}\r\n          variant=\"outlined\"\r\n        ></TextField>\r\n        <Typography className={classes.emoji}>👏</Typography>\r\n      </Paper>\r\n      {peopleEmojis.map((emoji, index) => (\r\n        <div\r\n          id={index}\r\n          className={classes.emoji}\r\n          key={index}\r\n          role=\"presentation\"\r\n          onClick={onEmojiClick}\r\n          dangerouslySetInnerHTML={{ __html: emojione.unicodeToImage(emoji) }}\r\n        />\r\n      ))}\r\n    </Paper>\r\n    </Backdrop>\r\n  ) : (\r\n    \"\"\r\n  );\r\n};\r\n\r\nexport default EmojiPicker;\r\n","C:\\chatterona\\src\\components\\AddServerDialog\\pages\\PageThree.js",[],"C:\\chatterona\\src\\components\\AddServerDialog\\pages\\PageTwo.js",[],"C:\\chatterona\\src\\components\\AddServerDialog\\pages\\PageOne.js",[],"C:\\chatterona\\src\\components\\AddServerDialog\\DialogItem.js",[],"C:\\chatterona\\src\\components\\EmojiPicker\\emojis.js",[],{"ruleId":"379","replacedBy":"380"},{"ruleId":"381","replacedBy":"382"},{"ruleId":"383","severity":1,"message":"384","line":7,"column":8,"nodeType":"385","messageId":"386","endLine":7,"endColumn":14},{"ruleId":"383","severity":1,"message":"387","line":7,"column":8,"nodeType":"385","messageId":"386","endLine":7,"endColumn":10},{"ruleId":"383","severity":1,"message":"388","line":7,"column":14,"nodeType":"385","messageId":"386","endLine":7,"endColumn":23},{"ruleId":"383","severity":1,"message":"389","line":10,"column":3,"nodeType":"385","messageId":"386","endLine":10,"endColumn":19},{"ruleId":"383","severity":1,"message":"390","line":11,"column":3,"nodeType":"385","messageId":"386","endLine":11,"endColumn":19},{"ruleId":"383","severity":1,"message":"387","line":24,"column":8,"nodeType":"385","messageId":"386","endLine":24,"endColumn":10},{"ruleId":"383","severity":1,"message":"391","line":5,"column":3,"nodeType":"385","messageId":"386","endLine":5,"endColumn":10},{"ruleId":"383","severity":1,"message":"392","line":8,"column":17,"nodeType":"385","messageId":"386","endLine":8,"endColumn":24},{"ruleId":"393","severity":1,"message":"394","line":95,"column":11,"nodeType":"395","endLine":98,"endColumn":13},{"ruleId":"393","severity":1,"message":"394","line":107,"column":11,"nodeType":"395","endLine":110,"endColumn":13},{"ruleId":"379","replacedBy":"396"},{"ruleId":"381","replacedBy":"397"},{"ruleId":"383","severity":1,"message":"398","line":44,"column":19,"nodeType":"385","messageId":"386","endLine":44,"endColumn":29},{"ruleId":"383","severity":1,"message":"399","line":10,"column":10,"nodeType":"385","messageId":"386","endLine":10,"endColumn":19},{"ruleId":"383","severity":1,"message":"400","line":88,"column":9,"nodeType":"385","messageId":"386","endLine":88,"endColumn":28},{"ruleId":"393","severity":1,"message":"394","line":95,"column":11,"nodeType":"395","endLine":98,"endColumn":13},{"ruleId":"393","severity":1,"message":"394","line":107,"column":11,"nodeType":"395","endLine":110,"endColumn":13},{"ruleId":"383","severity":1,"message":"401","line":1,"column":17,"nodeType":"385","messageId":"386","endLine":1,"endColumn":26},{"ruleId":"383","severity":1,"message":"402","line":2,"column":10,"nodeType":"385","messageId":"386","endLine":2,"endColumn":16},{"ruleId":"383","severity":1,"message":"403","line":57,"column":10,"nodeType":"385","messageId":"386","endLine":57,"endColumn":21},{"ruleId":"383","severity":1,"message":"404","line":57,"column":23,"nodeType":"385","messageId":"386","endLine":57,"endColumn":37},"no-native-reassign",["405"],"no-negated-in-lhs",["406"],"no-unused-vars","'config' is defined but never used.","Identifier","unusedVar","'db' is defined but never used.","'firestore' is defined but never used.","'checkContentType' is defined but never used.","'checkUrlsContent' is defined but never used.","'faSmile' is defined but never used.","'Tooltip' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["405"],["406"],"'setServers' is assigned a value but never used.","'useEffect' is defined but never used.","'handleChannelEvents' is assigned a value but never used.","'Component' is defined but never used.","'Dialog' is defined but never used.","'chosenEmoji' is assigned a value but never used.","'setChosenEmoji' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]